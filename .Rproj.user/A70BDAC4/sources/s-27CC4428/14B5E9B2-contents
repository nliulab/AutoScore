load("D:/XieFeng201902/Rdata/CD3(SGHori21variables).Rdata")
load("D:/XieFeng201902/Rdata/CD3(SGH50variables).Rdata")

Multi_Table<-function(model){
  b<-cbind(exp(cbind(OR = coef(model), confint.default(model))),summary(model)$coef[, "Pr(>|t|)"])
  b<-b[!grepl("Intercept", row.names(b),ignore.case = T),]
  b<-round(b,digits = 64)
  b<-as.data.frame(b)
  b$OR<-paste(b$OR,"(",b$`2.5 %`,"-",b$`97.5 %`,")", sep = "")
  return(b)

}

Multi_Table_glm<-function(model){
  b<-cbind(exp(cbind(OR = coef(model), confint.default(model))),summary(model)$coef[, "Pr(>|z|)"])
  b<-b[!grepl("Intercept", row.names(b),ignore.case = T),]
  b<-round(b,digits = 64)
  b<-as.data.frame(b)
  b$OR<-paste(b$OR,"(",b$`2.5 %`,"-",b$`97.5 %`,")", sep = "")
  return(b)

}



MD4<-MD3[MD3$TriageClass=="Scale 3 and 4",]
MD4$TriageClass<-NULL

Unitable<-Uni_glmTable(MD4)
Multable<-Multi_glmTable(MD4)




CD4<-CD3[CD3$TriageClass=="P3 and P4",]
CD4$TriageClass<-NULL

CUnitable<-Uni_glmTable(CD4)
CMultable<-Multi_glmTable(CD4)




CD4_los<-CD4
CD4_los$LOS<-as.numeric(CD4_los$LOS)
CD4_los$Duration_of_ICU<-NULL
###LOS
model <- lm(LOS~., data =CD4_los)
Multi_Table(model)


###icu ADMISSION

CDRL_icu<-CDRL
CDRL_icu$num_hd<-NULL
CDRL_icu$num_icu<-NULL
model <- glm(icuhd~., family = binomial(link="logit"), data = CDRL_icu)
Multi_Table_glm(model)



####compare with Triage system__marcus Ong
#select best variables for




######Clinical study: 2021.2.1
load("D:/NBoxDocuments2/EDData_SERP/CodeForPaperFormation/SERP5_tableGeneration_runing.RData")
library(pROC)
library(PredictABEL)

##1. subpopulation analysis- PACS vs SERP vs different scores based on PACS subpopulation
library(pROC)
set.seed(4)
## genrate final comparison table
rlist<-rseed
for(w in 1:3){
TestSet5<-TestSet4[TestSet4$Triage_Class_Code==w,]
label_list<-list(TestSet5$label,TestSet5$Mortality_2d,TestSet5$DeathLabel2,TestSet5$Mortality_30days_postDischarge,TestSet5$Mortality_1year)
score_list<-list(TestSet5$SERP,TestSet5$CART,TestSet5$Triage_Class_Code,TestSet5$MEWS,TestSet5$NEWS,TestSet5$CCI)
auc_result<-matrix(data = NA, nrow = 6, ncol = 5)
for(i in 1:6){
  for(j in 1:5){
    a<-round(as.numeric(ci(roc(label_list[[j]],score_list[[i]],quiet = T))),digits = 3)
    auc_result[i,j]<-paste(a[2]," ","(",a[1],"-",a[3],")",sep="")}}

r<-data.frame(auc_result)
colnames(r)<-c("30-day Mortality","2-day Mortality","Inpatient Mortality","30day-Post-discharge Mortality","1-year Mortality")
row.names(r)<-c("SERP","CART","PACS","MEWS","NEWS","CCI")
rlist<-rbind(rlist,r)

}




#1.1 complement system:
TestSet5<-TestSet4
label_list<-list(TestSet5$label,TestSet5$Mortality_2d,TestSet5$DeathLabel2,TestSet5$Mortality_30days_postDischarge,TestSet5$Mortality_1year)
score_list<-list(TestSet5$PACS_pred,TestSet5$PACS_pred+TestSet5$SERP_pred,TestSet5$PACS_pred+TestSet5$NEWS_pred,TestSet5$PACS_pred+TestSet5$MEWS_pred,TestSet5$PACS_pred+TestSet5$CCI_pred,TestSet5$PACS_pred+TestSet5$CART_pred)
auc_result<-matrix(data = NA, nrow = 6, ncol = 5)
for(i in 1:6){
  for(j in 1:5){
    a<-round(as.numeric(ci(roc(label_list[[j]],score_list[[i]],quiet = T))),digits = 3)
    auc_result[i,j]<-paste(a[2]," ","(",a[1],"-",a[3],")",sep="")}}

r<-data.frame(auc_result)
colnames(r)<-c("30-day Mortality","2-day Mortality","Inpatient Mortality","30day-Post-discharge Mortality","1-year Mortality")
row.names(r)<-c("PACS","PACS+SERP","PACS+NEWS","PACS+MEWS","PACS+CCI","PACS+CART")

##2. unexpected death:

library(tableone)
MD_table<-CreateTableOne(strata = "Triage_Class_Code",data=TestSet4[TestSet4$Mortality_2d,])
MD_table<-CreateTableOne(strata = "Triage_Class_Code",data=TestSet4[TestSet4$label==1,])
MD_table<-CreateTableOne(strata = c("label","Triage_Class_Code"),data=TestSet4)
MD_table<-CreateTableOne(strata = c("Triage_Class_Code"),data=TestSet4)


TestSet5<-TestSet4
for(i in 9:25)
TestSet5[,i]<-as.factor(TestSet5[,i])
str(TestSet5)
CreateTableOne(strata = c("label","Triage_Class_Code"),data=TestSet5)
CreateTableOne(strata = c("Mortality_2d","Triage_Class_Code"),data=TestSet5)
MD_table

TestSet4[TestSet4$Triage_Class_Code==1,]





TestSet_PACS3<-TestSet4[TestSet4$Triage_Class_Code==1,]
TestSet_PACS3_die<-TestSet_PACS3[TestSet_PACS3$Mortality_2d,]
label<-TestSet_PACS3$Mortality_2d
a<-roc(label,TestSet_PACS3$CART,quiet = T)
ci(a)
auc(a)
plot(a)

b<-roc(label,TestSet_PACS3$Triage_Class_Code,quiet = T)
ci(b)
auc(b)
plot(b)

c<-roc(label,TestSet_PACS3$SERP,quiet = T)
ci(c)
auc(c)
plot(c)

d<-roc(label,TestSet_PACS3$MEWS,quiet = T)
ci(d)
auc(d)
plot(d)

e<-roc(label,TestSet_PACS3$NEWS,quiet = T)
ci(e)
auc(e)
plot(e)

f<-roc(label,TestSet_PACS3$CCI,quiet = T)
ci(f)
auc(f)
plot(f)





###2. compare:
mean(TestSet_PACS3_die$SERP)
mean(TestSet_PACS3$SERP)

median(TestSet_PACS3_die$SERP)
median(TestSet_PACS3$SERP)


###3. reclassification:

cutoff <- c(0,0.1,1)
reclassification(TestSet4, TestSet4$label, TestSet4$PACS_pred, TestSet4$SERP_pred,cutoff)



# NOT RUN {
# specify dataset with outcome and predictor variables
data(ExampleData)
# specify column number of the outcome variable
cOutcome <- 2

# fit logistic regression models
# all steps needed to construct a logistic regression model are written in a function
# called 'ExampleModels', which is described on page 4-5
riskmodel1 <- ExampleModels()$riskModel1
riskmodel2 <- ExampleModels()$riskModel2

# obtain predicted risks
predRisk1 <- predRisk(riskmodel1)
predRisk2 <- predRisk(riskmodel2)
# specify cutoff values for risk categories
cutoff <- c(0,.10,.30,1)

# compute reclassification measures
reclassification(data=ExampleData, cOutcome=cOutcome,
                 predrisk1=predRisk1, predrisk2=predRisk2, cutoff)
# }




###4. Decision Curve Analysis:
library(rmda)

TestSet5<-TestSet4
TestSet5$label<-as.integer(TestSet5$label)-1
baseline.model <- decision_curve(label~PACS,
                                 data = TestSet5,
                                 thresholds = seq(0, .5, by = .01),
                                 study.design = 'cohort',
                                 bootstraps = 10) #number of bootstraps should be higher
full.model <- decision_curve(label~SERP,
                             data = TestSet5,
                             thresholds = seq(0, .5, by = .01),
                             bootstraps = 10)

both.model <- decision_curve(label~SERP+PACS,
                             data = TestSet5,
                             thresholds = seq(0, .5, by = .01),
                             bootstraps = 10)

NEWS.model <- decision_curve(label~NEWS,
                             data = TestSet5,
                             thresholds = seq(0, .5, by = .01),
                             bootstraps = 10)

plot_decision_curve( list(baseline.model, full.model, NEWS.model, both.model),
                     curve.names = c("Baseline model", "Full model","NEWS.model","both.model"),
                     col = c("blue", "red","yellow","green"),
                     lty = c(1,2),
                     lwd = c(3,2, 2, 1),
                     legend.position = "bottomright")

plot_decision_curve( list(NEWS.model, both.model),
                     curve.names = c("NEWS.model","both.model"),
                     col = c("blue", "red"),
                     lty = c(1,2),
                     lwd = c(3,2, 2, 1),
                     legend.position = "bottomright")


expit <- function(xx) exp(xx)/ (1+exp(xx))
#load simulated cohort data
data(dcaData)
baseline.model <- decision_curve(Cancer~Age + Female + Smokes,
                                 data = dcaData,
                                 thresholds = seq(0, .4, by = .01),
                                 study.design = 'cohort',
                                 bootstraps = 10) #number of bootstraps should be higher
full.model <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
                             data = dcaData,
                             thresholds = seq(0, .4, by = .01),
                             bootstraps = 10)

plot_clinical_impact(baseline.model, xlim = c(0, .4),
                     col = c("black", "blue"))

#simulated case-control data with same variables as above
data(dcaData_cc)
table(dcaData_cc$Cancer)
#estimated from the population where the
#case-control sample comes from.
population.rho = 0.11
full.model_cc <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
                                data = dcaData,
                                thresholds = seq(0, .4, by = .01),
                                bootstraps = 10,
                                study.design = 'case-control',
                                population.prevalence = population.rho)
#estimate the net benefit for an 'opt-out' policy.
nb.opt.out <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
                             data = dcaData,
                             policy = 'opt-out',
                             thresholds = seq(0, .4, by = .01),
                             bootstraps = 10)



plot_decision_curve( list(baseline.model, full.model),
                     curve.names = c("Baseline model", "Full model"),
                     col = c("blue", "red"),
                     lty = c(1,2),
                     lwd = c(3,2, 2, 1),
                     legend.position = "bottomright")
plot_decision_curve( list(baseline.model, full.model),
                     curve.names = c("Baseline model", "Full model"),
                     col = c("blue", "red"),
                     confidence.intervals = FALSE, #remove confidence intervals
                     cost.benefit.axis = FALSE, #remove cost benefit axis
                     legend.position = "none") #remove the legend


plot_decision_curve( list(baseline.model, full.model),
                     curve.names = c("Baseline model", "Full model"),
                     col = c("blue", "red"),
                     ylim = c(-0.05, 0.15), #set ylim
                     lty = c(2,1),
                     standardize = FALSE, #plot Net benefit instead of standardized net benefit
                     legend.position = "topright")

plot_roc_components(baseline.model, xlim = c(0, 0.4), col = c("black", "red"))

summary(full.model) #outputs standardized net benefit by default
summary(full.model, nround = 2, measure = "TPR")


##Cross-validation
full.model_cv <- cv_decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
                                   data = dcaData,
                                   folds = 5,
                                   thresholds = seq(0, .4, by = .01))
full.model_apparent <- decision_curve(Cancer~Age + Female + Smokes + Marker1 + Marker2,
                                      data = dcaData,
                                      thresholds = seq(0, .4, by = .01),
                                      confidence.intervals = 'none')
plot_decision_curve( list(full.model_apparent, full.model_cv),
                     curve.names = c('Apparent curve', 'Cross-validated curve'),
                     col = c('red', 'blue'),
                     lty = c(2,1),
                     lwd = c(3,2, 2, 1),
                     legend.position = 'bottomright')



save.image("D:/NBoxDocuments2/EDData_SERP/CodeForPaperFormation/SERP_clinical_tableGeneration_runing.RData")



load("D:/NBoxDocuments2/EDData_SERP/CodeForPaperFormation/SERP_clinical_tableGeneration_runing (OriginalSERP).RData")

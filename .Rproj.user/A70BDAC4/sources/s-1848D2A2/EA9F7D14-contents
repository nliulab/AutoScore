

cut_vec1 <- get_cut_vec(train_set_1, categorize = "quantile", quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), max_cluster = max_cluster)
cut_vec2 <- get_cut_vec(train_set_1, categorize = "k_means", quantiles = quantiles, max_cluster = 5)
cut_vec3 <- get_cut_vec(train_set_1, categorize = "decision_tree", quantiles = quantiles, max_cluster = 5)

quantiles
quantile

AUC <- AutoScore_parsimony(
  train_set,
  validation_set,
  rank = ranking,
  max_score = 100,
  n_min = 1,
  n_max = 20,
  categorize = "decision_tree",
  quantiles = c(0, 0.8, 1)
)

AUC <- AutoScore_parsimony(
  train_set,
  validation_set,
  rank = ranking,
  max_score = 100,
  n_min = 1,
  n_max = 20,
  categorize = "k_means",
  max_cluster = 9,
  quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)


num_var <- 6
final_variables <- names(ranking[1:num_var])

cut_vec <- AutoScore_weighting(
  train_set,
  validation_set,
  final_variables,
  max_score = 100,
  categorize = "k_means",
  max_cluster = 3,
  quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)


cut_vec <- AutoScore_weighting(
  train_set,
  validation_set,
  final_variables,
  max_score = 100,
  categorize = "quantile",
  max_cluster = 3,
  quantiles = c(0, 0.9, 1)
)

train_set_1 <- train_set[, c(final_variables, "label")]
validation_set_1 <- validation_set[, c(final_variables, "label")]

# AutoScore Module 2 : cut numeric and transfer categories and generate "cut_vec"
cut_vec <- get_cut_vec(train_set_1, categorize = "decision_tree", quantiles = quantiles, max_cluster = max_cluster)
train_set_2 <- transform_df_fixed(train_set_1, cut_vec)
validation_set_2 <- transform_df_fixed(validation_set_1, cut_vec)



cut_vec <- AutoScore_weighting(
  train_set,
  validation_set,
  final_variables,
  max_score = 100,
  categorize = "k_means",
  max_cluster = 2,
  quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)



##Build package flow:

## 1.run roxygen2 first:
roxygen2::roxygenize(package.dir = ".")

##


## 2. checking and see what's hapenning?

importFrom("stats", "binomial", "coef", "confint.default", "glm",
           "kmeans", "na.omit", "quantile", "relevel")


output: rmarkdown::github_document
github_document:
  pandoc_args: --webtex

R_CHECK_DOC_SIZES_=FALSE
R_QPDF=true
library(installr)
updater()

library(mvtnorm)


## 3.library(usethis)
#install.packages("testthat")
##Add data and vi
usethis::use_vignette("Guide_book")

devtools::check_win_release()

testthat


load("D:/Document/GitHub/AutoScore_Improvement/Data/testdf6_mimic_20000.Rdata")
model<-glm(label~.,testdf6_mimic_20000,family = binomial(link = "logit"))
str(testdf6_mimic_20000)

testdf6_mimic_20000$label<-NULL
testdf6_mimic_20000$spo2_mean<-log(testdf6_mimic_20000$spo2_mean)

colMeans(testdf6_mimic_20000)

cov(testdf6_mimic_20000)

sigma<-cov(testdf6_mimic_20000)
library(mvtnorm)
x <- rmvnorm(n=20000, mean=colMeans(testdf6_mimic_20000), sigma=sigma)

sample_data<-data.frame(x)
sample_data[sample_data<0]<-0
sample_data$label<-predict(model, sample_data,type = "link")
sample_data$label<-sample_data$label+ rnorm(20000,mean = 0, sd = 1)
logit2prob <- function(logit){
  odds <- exp(logit)
  prob <- odds / (1 + odds)
  return(prob)}

sample_data$label<-logit2prob(sample_data$label)

mean(sample_data$label>0.50)

sample_data$label<-sample_data$label>0.5

sample_data$label<-as.factor(sample_data$label)


sample_data$spo2_mean<-exp(sample_data$spo2_mean)
sample_data$spo2_mean[sample_data$spo2_mean>100]<-100


sample_data[,c("tempc_mean","aniongap_mean","creatinine_mean","lactate_mean","potassium_mean")]<-round(sample_data[,c("tempc_mean","aniongap_mean","creatinine_mean","lactate_mean","potassium_mean")],1)


sample_data[,c("heartrate_mean", "sysbp_mean", "diasbp_mean", "meanbp_mean",
  "resprate_mean",  "spo2_mean", "glucose_mean",
  "bicarbonate_mean",  "chloride_mean", "hematocrit_mean",
  "hemoglobin_mean",  "platelet_mean",
  "bun_mean", "sodium_mean", "wbc_mean", "Age")]<- round(sample_data[,c("heartrate_mean", "sysbp_mean", "diasbp_mean", "meanbp_mean",
                                                                       "resprate_mean",  "spo2_mean", "glucose_mean",
                                                                       "bicarbonate_mean",  "chloride_mean", "hematocrit_mean",
                                                                       "hemoglobin_mean",  "platelet_mean",
                                                                       "bun_mean", "sodium_mean", "wbc_mean", "Age")],0)
names(sample_data)[names(sample_data) == "label"] <- "Mortality_inpatient"


set.seed(5)
sample_data_small <- sample_data[sample(1:20000, size = 1000),]



colSums(sample_data==0)


####usethis
library(usethis)
use_data(sample_data,overwrite = TRUE)
use_data(sample_data_small,overwrite = TRUE)





cut_vec$Age <- c(30, 78, 85)
cut_vec$platelet_mean <- c(80, 150, 300, 450)
cut_vec$tempc_mean <- c(36, 36.5, 37.5, 38)
cut_vec$lactate_mean <- c(1, 2.5, 4)
cut_vec$bun_mean <- c(7.5, 12, 35, 70)


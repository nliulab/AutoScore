
##############################################################
## Integrated AUC
##############################################################
# AUC	- vector of AUCéº“s
# times	- vector of times
# S		- vector of survival probability
# tmax	- maximum timepoint



IntAUC <- function( AUC=uno1$auc, times=uno1$times, S, tmax, auc.type="cumulative")
{
  n_S <- length(S)
  n_AUC <- length(AUC)
  n_times <- length(times)
  if(!((n_S == n_AUC) && (n_AUC == n_times)))
    stop("AUC, times and S must be the same length!")
  auc.type <- charmatch( auc.type, c("cumulative","incident") )
  if (is.na(auc.type))
    stop("auc.type must be one of 'cumulative' or 'incident'")
  maxI <- sum( times <= tmax )
  ind_S <- S[min(maxI+1,length(S))]
  iAUC <- .C("int_auc",0.0,
             as.numeric(AUC),
             as.numeric(times),
             as.numeric(S),
             as.numeric(tmax),
             as.integer(n_S),
             as.integer(maxI),
             as.numeric(ind_S),
             as.integer(auc.type-1),
             PACKAGE="survAUC")
  iAUC[[1]]
}


my.sort <- function(x,index.return=FALSE,decreasing=FALSE) {
  if(decreasing)
    x <- -x
  y <- sort(x, method="quick", index.return=index.return)
  if(decreasing)
    y$x <- -y$x
  y
}

AUC.uno <- function(Surv.rsp, Surv.rsp.new, lpnew, times, savesensspec=FALSE){

  thresh <- my.sort(unique(lpnew))
  n_th <- length(thresh)
  n_t <- length(times)

  #### Sensetivity, Specificity and AUC.
  auc.uno <- .C("auc_uno",
                as.numeric(vector("numeric",length=n_t)),
                as.numeric(0),
                as.numeric(vector("numeric",length=n_t*(n_th+1))+1),
                as.numeric(vector("numeric",length=n_t*(n_th+1))),
                as.numeric(Surv.rsp[,1]),
                as.numeric(1-Surv.rsp[,2]),
                as.numeric(thresh),
                as.numeric(times),
                as.numeric(lpnew),
                as.numeric(Surv.rsp.new[,1]),
                as.numeric(Surv.rsp.new[,2]),
                as.integer(n_th),
                as.integer(n_t),
                as.integer(dim(Surv.rsp.new)[1]),
                as.integer(dim(Surv.rsp)[1]),
                PACKAGE="survAUC")
  if(!savesensspec){
    erg <- list(auc=auc.uno[[1]], times=auc.uno[[8]], iauc=auc.uno[[2]])
  }else{
    erg <- list(auc=auc.uno[[1]], times=auc.uno[[8]], iauc=auc.uno[[2]],
                sens=matrix(auc.uno[[3]], n_t, n_th+1),
                spec=matrix(auc.uno[[4]], n_t, n_th+1),
                thresh=auc.uno[[7]])
  }
  class(erg) <- "survAUC"
  erg
}




times<- seq(1, 10, 1)
Surv.rsp <- Surv(TrainSet$time, TrainSet$status)
Surv.rsp.new <- Surv(ValidationSet$time, ValidationSet$status)

U_ROC <- AUC.uno(Surv.rsp.new, Surv.rsp.new, lpnew = marker, times = times)


S_ROC_final<-c()
for(i in times){
  S_ROC<-survivalROC(ValidationSet$time, ValidationSet$status,marker,predict.time = i,method = "KM")
  S_ROC_final<-c(S_ROC_final,S_ROC$AUC)
}

IntAUC(U_ROC$auc,times,km_survival,10,auc.type = "cumulative")

km_survival_w<-c(1,km_survival[-10])
km_survival_sum<-sum(km_survival_w-km_survival)
weight<-(km_survival_w-km_survival)/km_survival_sum

sum(weight*U_ROC$auc)


Mayo4.2= survivalROC(Stime=mayo$time,
                     status=mayo$censor,
                     marker = mayo$mayoscore4,
                     predict.time =  cutoff, method="KM")


Surv.rsp.new <- Surv(mayo$time, mayo$censor)

U_ROC <- AUC.uno(Surv.rsp.new, Surv.rsp.new, lpnew = mayo$mayoscore4, times = 365)



km_fit_test <- survfit(Surv.rsp.new ~ 1, data = ValidationSet)
km_survival<-summary(km_fit_test)$surv[1:10]
km_time<-summary(km_fit_test)$time
sur<-c()
for(i in 1:90){
  if(km_time[i]==1) sur<-c(sur,km_survival[i])
  else

}

km_survival<-c(km_survival,0.86)








## important
km_survival_w<-c(1,km_survival[-length(km_survival)])
km_survival_sum<-sum(km_survival_w-km_survival)
weight<-(km_survival_w-km_survival)/km_survival_sum
sum(weight*AUC_uno$auc)

S_ROC_final<-c()
for(i in km_time){
  S_ROC<-survivalROC(ValidationSet$time, ValidationSet$status,marker,predict.time = i,method = "KM")
  S_ROC_final<-c(S_ROC_final,S_ROC$AUC)
}




{
  "hash": "db7be5cbab96fbac32d15f00cfba1e9f",
  "result": {
    "markdown": "# AutoScore for ordinal outcomes (AutoScore-Ordinal) {#top}\n\n\n\n\n\nAutoScore-Ordinal refers to the AutoScore framework for developing point-based scoring models for ordinal outcomes. Similar to the implementation described in [Chapter 5](04-autoscore.qmd#top) for binary outcomes, AutoScore-Ordinal is implemented by five functions: `AutoScore_rank_Ordinal()`, `AutoScore_parsimony_Ordinal()`, `AutoScore_weighting_Ordinal()`, `AutoScore_fine_tuning_Ordinal()` and `AutoScore_testing_Ordinal()`.\n\nIn this chapter, we demonstrate the use of AutoScore-Ordinal to develop sparse\nrisk scores for an ordinal outcome, adjust parameters to improve\ninterpretability, assess the performance of the final model and generate a\nlookup table to easily predict risks for new data. To facilitate clinical\napplications, in the following sections we demonstrate AutoScore application\nwith large and small datasets and with missing information.\n\n::: callout-important\n- *Scoring models below are based on simulated data to demonstrate AutoScore usage.* \n- *Variable names are intentionally masked to avoid misinterpretation and misuse.*\n:::\n\nCite the following paper for AutoScore-Ordinal:\n\nSaffari SE, Ning Y, Feng X, Chakraborty B, Volovici V, Vaughan R, Ong\nME, Liu N, AutoScore-Ordinal: An interpretable machine learning framework for\ngenerating scoring models for ordinal outcomes, arXiv:2202.08407\n(<https://doi.org/10.48550/arxiv.2202.08407>)\n\n## Demo 1: large sample {#demo1}\n\nIn Demo 1, we demonstrate the use of AutoScore-Ordinal on a dataset with 20,000\nobservations using split-sample approach (i.e., to randomly divide the full\ndataset into training, validation and test sets) for model development.\n\n::: callout-important\n- Before proceeding, follow the steps in [Chapter 2](03-data_processing.qmd#top)\nto ensure all data requirements are met.\n- Refer to [Chapter 3](02-desc_analysis.qmd#ordinal) for how to generate simple\ndescriptive statistics before building prediction models.\n:::\n\n### Load package and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(AutoScore)\ndata(\"sample_data_ordinal\")\ndim(sample_data_ordinal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20000    21\n```\n:::\n\n```{.r .cell-code}\nhead(sample_data_ordinal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  label Age Gender Util_A Util_B Util_C    Util_D Comorb_A Comorb_B Comorb_C\n1     1  63 FEMALE     P2      0   0.00 3.5933333        0        0        0\n2     1  41 FEMALE     P2      0   0.96 3.6288889        0        0        0\n3     1  86   MALE     P1      0   0.00 2.6502778        0        0        0\n4     1  51   MALE     P2      0   0.00 4.9711111        0        0        0\n5     1  23 FEMALE     P1      0   0.00 0.5352778        0        0        0\n6     1  32 FEMALE     P2      0   4.13 4.4008333        0        0        0\n  Comorb_D Comorb_E Lab_A Lab_B Lab_C Vital_A Vital_B Vital_C Vital_D Vital_E\n1        0        0   117   3.9   136      91      19     100      70     152\n2        1        0   500   3.6   114      91      16     100      70     147\n3        0        0    72   4.1   136     100      18      99      65     126\n4        0        0    67   5.0   122      73      17      97      46     100\n5        0        0  1036   4.1   138      74      18      98      89     114\n6        0        0   806   4.1   136      77      18      98      74     157\n  Vital_F\n1    25.7\n2    22.6\n3    25.7\n4    24.9\n5    25.7\n6    25.3\n```\n:::\n\n```{.r .cell-code}\ncheck_data_ordinal(sample_data_ordinal)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nYour dataset doesn't have any missing values.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nData type check passed.\n```\n:::\n:::\n\n\n### Prepare training, validation, and test datasets\n\n- Option 1: Prepare three separate datasets to train, validate, and test models.\n- Option 2: Use demo codes below to randomly split your dataset into training,\nvalidation, and test datasets (70%, 10%, 20%, respectively), possibly stratified\nby outcome categories (`strat_by_label = TRUE`) to ensure they are well\nrepresented in all three datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(4)\nout_split <- split_data(data = sample_data_ordinal, ratio = c(0.7, 0.1, 0.2), \n                        strat_by_label = TRUE)\ntrain_set <- out_split$train_set\nvalidation_set <- out_split$validation_set\ntest_set <- out_split$test_set\n```\n:::\n\n\n### STEP(i): Generate variable ranking list \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 1</p>\n\n- `ntree`: Number of trees in the random forest algorithm (Default: 100).\n\n\n::: {.cell hash='06-autoscore_ordinal_cache/html/rank_ord_fdc383d546522427263ba85db8ef0e5a'}\n\n```{.r .cell-code}\nranking <- AutoScore_rank_Ordinal(train_set = train_set, ntree = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe ranking based on variable importance was shown below for each variable: \n   Util_D     Lab_A   Vital_F   Vital_A       Age   Vital_E   Vital_D     Lab_B \n413.60631 379.51127 378.30195 372.84319 372.68880 364.51371 339.60643 296.86038 \n    Lab_C    Util_C    Util_B   Vital_C   Vital_B  Comorb_A    Util_A    Gender \n279.47643 244.28653 201.34337 186.47331 168.45639 115.28191  98.78811  51.88705 \n Comorb_B  Comorb_D  Comorb_C  Comorb_E \n 41.11154  32.31979  17.64803  11.87098 \n```\n:::\n\n::: {.cell-output-display}\n![](06-autoscore_ordinal_files/figure-html/rank_ord-1.png){width=576}\n:::\n:::\n\n\n### STEP(ii): Select model with parsimony plot {#large-data}\n\n<p class=\"autoscore-module\">AutoScore-Ordinal Modules 2+3+4</p>\n\n-   `n_min`: Minimum number of selected variables (Default: 1).\n-   `n_max`: Maximum number of selected variables (Default: 20).\n-   `categorize`: Methods for categorizing continuous variables. Options include\n`\"quantile\"` or `\"kmeans\"` (Default: `\"quantile\"`).\n-   `quantiles`: Predefined quantiles to convert continuous variables to\ncategorical ones (Default: `c(0, 0.05, 0.2, 0.8, 0.95, 1)`). Available if \n`categorize = \"quantile\"`.\n-   `max_cluster`: The max number of cluster (Default: 5). Available if\n`categorize = \"kmeans\"`.\n-   `max_score`: Maximum total score (Default: 100).\n-   `auc_lim_min`: y-axis limits (min) of the parsimony plot (Default: 0.5)\n-   `auc_lim_max`: y-axis limits (max) of the parsimony plot (Default: `\"adaptive\"`)\n-   `link`: link function in the ordinal regression, which affects predictive\nperformance. Options include `\"logit\"` (for proportional odds model),\n`\"cloglog\"` (for proportional hazard model) and `\"probit\"` (Default: `\"logit\"`).\n**Use the same link throughout descriptive analysis and model building steps.**\n\n\n::: {.cell hash='06-autoscore_ordinal_cache/html/mauc_ord_c41dd0ae704c9c5e62465d6e38bbcc08'}\n\n```{.r .cell-code}\nmAUC <- AutoScore_parsimony_Ordinal(\n  train_set = train_set, validation_set = validation_set, \n  rank = ranking, link = \"logit\", max_score = 100, n_min = 1, n_max = 20,\n  categorize = \"quantile\", quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), \n  auc_lim_min = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelect 1 variables:  Mean area under the curve: 0.4555607 \nSelect 2 variables:  Mean area under the curve: 0.5110174 \nSelect 3 variables:  Mean area under the curve: 0.5780548 \nSelect 4 variables:  Mean area under the curve: 0.5912554 \nSelect 5 variables:  Mean area under the curve: 0.6685143 \nSelect 6 variables:  Mean area under the curve: 0.672106 \nSelect 7 variables:  Mean area under the curve: 0.6690071 \nSelect 8 variables:  Mean area under the curve: 0.6710102 \nSelect 9 variables:  Mean area under the curve: 0.6706072 \nSelect 10 variables:  Mean area under the curve: 0.6721932 \nSelect 11 variables:  Mean area under the curve: 0.7003498 \nSelect 12 variables:  Mean area under the curve: 0.6995013 \nSelect 13 variables:  Mean area under the curve: 0.6994186 \nSelect 14 variables:  Mean area under the curve: 0.7476355 \nSelect 15 variables:  Mean area under the curve: 0.7489346 \nSelect 16 variables:  Mean area under the curve: 0.7448716 \nSelect 17 variables:  Mean area under the curve: 0.744752 \nSelect 18 variables:  Mean area under the curve: 0.744752 \nSelect 19 variables:  Mean area under the curve: 0.745261 \nSelect 20 variables:  Mean area under the curve: 0.7472124 \n```\n:::\n\n::: {.cell-output-display}\n![](06-autoscore_ordinal_files/figure-html/mauc_ord-1.png){width=672}\n:::\n:::\n\n\n-   Determine the optimal number of variables (`num_var`) based on the parsimony\nplot obtained in STEP(ii).\n-   The final list of variables is the first `num_var` variables in the ranked\nlist `ranking` obtained in STEP(i).\n-   Optional: User can adjust the finally included variables `final_variables`\nbased on the clinical preferences and knowledge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 1: Top 5 variables are selected\nnum_var <- 5\nfinal_variables <- names(ranking[1:num_var])\n\n# Example 2: Top 14 variables are selected\nnum_var <- 14\nfinal_variables <- names(ranking[1:num_var])\n\n# Example 3: Top 5 variables, the 11th and 14th variable are selected\nfinal_variables <- names(ranking[c(1:5, 11, 14)])\n```\n:::\n\n\n### STEP(iii): Generate initial scores with final variables \n\n<p class=\"autoscore-module\">Re-run AutoScore-Ordinal Modules 2+3</p>\n\n- Generate `cut_vec` with current cutoffs of continuous variables, which can be\nfine-tuned in STEP(iv).\n- Performance of resulting scores is evaluated using the mean AUC across\ndichotomous classifications (mAUC), with 95% CI computed using bootstrap \n(Default: `n_boot = 100` bootstrap samples). Setting `n_boot = 1` disables\nbootstrap and reports mAUC without CI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_vec <- AutoScore_weighting_Ordinal(\n  train_set = train_set, validation_set = validation_set, \n  final_variables = final_variables, link = \"logit\", max_score = 100,\n  categorize = \"quantile\", quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), \n  n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n****Included Variables: \n  variable_name\n1        Util_D\n2         Lab_A\n3       Vital_F\n4       Vital_A\n5           Age\n6        Util_B\n7      Comorb_A\n****Initial Scores: \n\n\n========  ============  =====\nvariable  interval      point\n========  ============  =====\nUtil_D    <0.652          7  \n          [0.652,1.32)    7  \n          [1.32,3.93)     2  \n          [3.93,5.93)     1  \n          >=5.93          0  \n                             \nLab_A     <46             6  \n          [46,61)         0  \n          [61,134)        1  \n          [134,584)       8  \n          >=584           6  \n                             \nVital_F   <16.7           8  \n          [16.7,20.5)     4  \n          [20.5,25.4)     0  \n          [25.4,28.1)     1  \n          >=28.1          4  \n                             \nVital_A   <58             2  \n          [58,68)         0  \n          [68,97)         3  \n          [97,113)        6  \n          >=113          13  \n                             \nAge       <27             0  \n          [27,46)         4  \n          [46,78)        14  \n          [78,87)        18  \n          >=87           21  \n                             \nUtil_B    <1              0  \n          [1,4)          10  \n          >=4            21  \n                             \nComorb_A  0               0  \n          1              22  \n========  ============  =====\n***Performance (based on validation set):\nmAUC: 0.7402 \t 95% CI: 0.7159-0.7627 (from 100 bootstrap samples)\n***The cutoffs of each variables generated by the AutoScore-Ordinal are saved in cut_vec. You can decide whether to revise or fine-tune them \n```\n:::\n:::\n\n\n### STEP(iv): Fine-tune initial score from STEP(iii) {#fine-tune}\n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 5 & Re-run AutoScore-Ordinal Modules 2+3</p>\n\n-   Revise `cut_vec` with domain knowledge to update the scoring table\n(AutoScore-Ordinal Module 5).\n-   Re-run AutoScore-Ordinal Modules 2+3 to generate the updated scores.\n-   Users can choose any cutoff values and/or any number of categories, but are\nsuggested to choose numbers close to the automatically determined values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## For example, we have current cutoffs of continuous variable: Age \n## ==============  ===========  =====\n## variable        interval     point\n## ==============  ===========  =====\n## Age                 <27          0  \n##                     [27,46)      2  \n##                     [46,78)     12  \n##                     [78,87)     16 \n##                     >=87        19 \n```\n:::\n\n\n- Current cutoffs:`c(27, 46, 78, 87)`. We can fine tune the cutoffs as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 1: rounding to a nice number\ncut_vec$Age <- c(25, 45, 75, 85)\n\n# Example 2: changing cutoffs according to clinical knowledge or preference \ncut_vec$Age <- c(25, 50, 75, 85)\n\n# Example 3: combining categories\ncut_vec$Age <- c(45, 75, 85)\n```\n:::\n\n\n- mAUC and 95% bootstrap CI (Default: `n_boot = 100` bootstrap samples) are\nreported after fine-tuning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_vec$Util_D <- c(2 / 3, 4 / 3, 4, 6)\ncut_vec$Vital_F <- c(17, 20, 25, 28)\ncut_vec$Vital_A <- c(60, 70, 95, 115)\ncut_vec$Lab_A <- c(45, 60, 135, 595)\ncut_vec$Age <- c(25, 45, 75, 85)\nscoring_table <- AutoScore_fine_tuning_Ordinal(\n  train_set = train_set, validation_set = validation_set,\n  final_variables = final_variables, cut_vec = cut_vec,\n  max_score = 100, n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n***Fine-tuned Scores: \n\n\n========  ============  =====\nvariable  interval      point\n========  ============  =====\nUtil_D    <0.667          7  \n          [0.667,1.33)    7  \n          [1.33,4)        2  \n          [4,6)           1  \n          >=6             0  \n                             \nLab_A     <45             7  \n          [45,60)         0  \n          [60,135)        1  \n          [135,595)       8  \n          >=595           6  \n                             \nVital_F   <17             8  \n          [17,20)         4  \n          [20,25)         0  \n          [25,28)         0  \n          >=28            4  \n                             \nVital_A   <60             0  \n          [60,70)         0  \n          [70,95)         2  \n          [95,115)        5  \n          >=115          13  \n                             \nAge       <25             0  \n          [25,45)         4  \n          [45,75)        14  \n          [75,85)        19  \n          >=85           22  \n                             \nUtil_B    <1              0  \n          [1,4)          10  \n          >=4            21  \n                             \nComorb_A  0               0  \n          1              22  \n========  ============  =====\n***Performance (based on Validation Set, after fine-tuning):\nmAUC: 0.7466 \t 95% CI: 0.7230-0.7728 (from 100 bootstrap samples)\n```\n:::\n:::\n\n\n### STEP(v): Evaluate final risk scores on test dataset \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 6</p>\n\n- mAUC and generalised c-index are reported for the test set, with 95% bootstrap\nCI (Default: `n_boot = 100` bootstrap samples).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_score <- AutoScore_testing_Ordinal(\n  test_set = test_set, link = \"logit\", final_variables = final_variables, \n  cut_vec = cut_vec, scoring_table = scoring_table, \n  with_label = TRUE, n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n***Performance using AutoScore-Ordinal (based on unseen test Set):\nmAUC: 0.7552 \t 95% CI: 0.7346-0.7785 (from 100 bootstrap samples)\nGeneralised c-index: 0.7267 \t 95% CI: 0.7097-0.7492 (from 100 bootstrap samples)\n```\n:::\n\n```{.r .cell-code}\nhead(pred_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pred_score Label\n1         40     1\n2         35     1\n3         29     1\n4         26     1\n5         33     1\n6         22     1\n```\n:::\n:::\n\n\n- Users can compute mAUC and generalised c-index (with 95% bootstrap CI) for\npreviously saved `pred_score`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_performance_ordinal(\n  label = pred_score$Label, score = pred_score$pred_score, \n  n_boot = 100, report_cindex = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmAUC: 0.7552 \t 95% CI: 0.7373-0.7791 (from 100 bootstrap samples)\nGeneralised c-index: 0.7267 \t 95% CI: 0.7098-0.7421 (from 100 bootstrap samples)\n```\n:::\n:::\n\n\n- Users can use `pred_score` for further analysis or save it as CSV to other software.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(pred_score, file = \"pred_score.csv\")\n```\n:::\n\n\n### Map score to risk {#demo1-map}\n\n- The interactive figure below maps score to predicted risks.\n- `point_size`: Size of points indicating all attainable scores (Default: 0.5).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_predicted_risk(pred_score = pred_score, max_score = 100, \n                    final_variables = final_variables, \n                    scoring_table = scoring_table, point_size = 1)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f4cd67c33c25935f4b74\" style=\"width:100%;height:464px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f4cd67c33c25935f4b74\">{\"x\":{\"data\":[{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"y\":[0.9786801242071,0.977065236595082,0.975331111539291,0.97346942752638,0.971471357554621,0.969327550312923,0.967028112685972,0.964562594024918,0.961919972687097,0.959088645417365,0.956056420217095,0.952810513424225,0.949337551807546,0.94562358055948,0.941654078151608,0.937413979093821,0.932887705707825,0.928059210084918,0.92291202744188,0.917429342111888,0.911594067403411,0.90538894052208,0.89879663367099,0.891799882315783,0.884381631414102,0.876525200156797,0.868214465443547,0.859434063912775,0.850169611861496,0.840407941824616,0.830137353938918,0.819347879502851,0.808031553373663,0.796182691038901,0.783798165387451,0.770877677420473,0.757424014425456,0.743443288533242,0.728945148137349,0.71394295442724,0.698453915319634,0.682499169405182,0.666103813192025,0.649296865937934,0.632111167715699,0.614583208027366,0.596752884224562,0.578663191134698,0.560359845546673,0.541890851469707,0.523306014230632,0.504656413402711,0.485993846153996,0.467370253772358,0.448837144797491,0.430445028326785,0.412242870653306,0.394277587465423,0.376593582444794,0.359232341324874,0.342232088417956,0.325627510398165,0.309449549857062,0.293725268938105,0.278477781304337,0.263726248880279,0.249485938292959,0.235768330754056,0.222581278289171,0.209929198724796,0.197813301665554,0.186231837797783,0.17518036419603,0.164652018837402,0.154637798195112,0.145126832539032,0.136106654374169,0.127563456260007,0.119482335043684,0.111847520283929,0.104642585323193,0.0978506400712812,0.0914545050890423,0.0854368670038668,0.0797804156518029,0.0744679636287022,0.069482549151272,0.0648075232857765,0.0604266227053859,0.0563240291949011,0.0524844171415982,0.0488929902405068,0.045535508608197,0.0423983074469462,0.0394683083360713,0.0367330241535385,0.0341805585522785,0.0317996008348165,0.029579416989176,0.0275098375702841,0.0255812430355965],\"text\":[\"Outcome category: 1<br />Score:   0<br />Predicted risk: 0.978680124\",\"Outcome category: 1<br />Score:   1<br />Predicted risk: 0.977065237\",\"Outcome category: 1<br />Score:   2<br />Predicted risk: 0.975331112\",\"Outcome category: 1<br />Score:   3<br />Predicted risk: 0.973469428\",\"Outcome category: 1<br />Score:   4<br />Predicted risk: 0.971471358\",\"Outcome category: 1<br />Score:   5<br />Predicted risk: 0.969327550\",\"Outcome category: 1<br />Score:   6<br />Predicted risk: 0.967028113\",\"Outcome category: 1<br />Score:   7<br />Predicted risk: 0.964562594\",\"Outcome category: 1<br />Score:   8<br />Predicted risk: 0.961919973\",\"Outcome category: 1<br />Score:   9<br />Predicted risk: 0.959088645\",\"Outcome category: 1<br />Score:  10<br />Predicted risk: 0.956056420\",\"Outcome category: 1<br />Score:  11<br />Predicted risk: 0.952810513\",\"Outcome category: 1<br />Score:  12<br />Predicted risk: 0.949337552\",\"Outcome category: 1<br />Score:  13<br />Predicted risk: 0.945623581\",\"Outcome category: 1<br />Score:  14<br />Predicted risk: 0.941654078\",\"Outcome category: 1<br />Score:  15<br />Predicted risk: 0.937413979\",\"Outcome category: 1<br />Score:  16<br />Predicted risk: 0.932887706\",\"Outcome category: 1<br />Score:  17<br />Predicted risk: 0.928059210\",\"Outcome category: 1<br />Score:  18<br />Predicted risk: 0.922912027\",\"Outcome category: 1<br />Score:  19<br />Predicted risk: 0.917429342\",\"Outcome category: 1<br />Score:  20<br />Predicted risk: 0.911594067\",\"Outcome category: 1<br />Score:  21<br />Predicted risk: 0.905388941\",\"Outcome category: 1<br />Score:  22<br />Predicted risk: 0.898796634\",\"Outcome category: 1<br />Score:  23<br />Predicted risk: 0.891799882\",\"Outcome category: 1<br />Score:  24<br />Predicted risk: 0.884381631\",\"Outcome category: 1<br />Score:  25<br />Predicted risk: 0.876525200\",\"Outcome category: 1<br />Score:  26<br />Predicted risk: 0.868214465\",\"Outcome category: 1<br />Score:  27<br />Predicted risk: 0.859434064\",\"Outcome category: 1<br />Score:  28<br />Predicted risk: 0.850169612\",\"Outcome category: 1<br />Score:  29<br />Predicted risk: 0.840407942\",\"Outcome category: 1<br />Score:  30<br />Predicted risk: 0.830137354\",\"Outcome category: 1<br />Score:  31<br />Predicted risk: 0.819347880\",\"Outcome category: 1<br />Score:  32<br />Predicted risk: 0.808031553\",\"Outcome category: 1<br />Score:  33<br />Predicted risk: 0.796182691\",\"Outcome category: 1<br />Score:  34<br />Predicted risk: 0.783798165\",\"Outcome category: 1<br />Score:  35<br />Predicted risk: 0.770877677\",\"Outcome category: 1<br />Score:  36<br />Predicted risk: 0.757424014\",\"Outcome category: 1<br />Score:  37<br />Predicted risk: 0.743443289\",\"Outcome category: 1<br />Score:  38<br />Predicted risk: 0.728945148\",\"Outcome category: 1<br />Score:  39<br />Predicted risk: 0.713942954\",\"Outcome category: 1<br />Score:  40<br />Predicted risk: 0.698453915\",\"Outcome category: 1<br />Score:  41<br />Predicted risk: 0.682499169\",\"Outcome category: 1<br />Score:  42<br />Predicted risk: 0.666103813\",\"Outcome category: 1<br />Score:  43<br />Predicted risk: 0.649296866\",\"Outcome category: 1<br />Score:  44<br />Predicted risk: 0.632111168\",\"Outcome category: 1<br />Score:  45<br />Predicted risk: 0.614583208\",\"Outcome category: 1<br />Score:  46<br />Predicted risk: 0.596752884\",\"Outcome category: 1<br />Score:  47<br />Predicted risk: 0.578663191\",\"Outcome category: 1<br />Score:  48<br />Predicted risk: 0.560359846\",\"Outcome category: 1<br />Score:  49<br />Predicted risk: 0.541890851\",\"Outcome category: 1<br />Score:  50<br />Predicted risk: 0.523306014\",\"Outcome category: 1<br />Score:  51<br />Predicted risk: 0.504656413\",\"Outcome category: 1<br />Score:  52<br />Predicted risk: 0.485993846\",\"Outcome category: 1<br />Score:  53<br />Predicted risk: 0.467370254\",\"Outcome category: 1<br />Score:  54<br />Predicted risk: 0.448837145\",\"Outcome category: 1<br />Score:  55<br />Predicted risk: 0.430445028\",\"Outcome category: 1<br />Score:  56<br />Predicted risk: 0.412242871\",\"Outcome category: 1<br />Score:  57<br />Predicted risk: 0.394277587\",\"Outcome category: 1<br />Score:  58<br />Predicted risk: 0.376593582\",\"Outcome category: 1<br />Score:  59<br />Predicted risk: 0.359232341\",\"Outcome category: 1<br />Score:  60<br />Predicted risk: 0.342232088\",\"Outcome category: 1<br />Score:  61<br />Predicted risk: 0.325627510\",\"Outcome category: 1<br />Score:  62<br />Predicted risk: 0.309449550\",\"Outcome category: 1<br />Score:  63<br />Predicted risk: 0.293725269\",\"Outcome category: 1<br />Score:  64<br />Predicted risk: 0.278477781\",\"Outcome category: 1<br />Score:  65<br />Predicted risk: 0.263726249\",\"Outcome category: 1<br />Score:  66<br />Predicted risk: 0.249485938\",\"Outcome category: 1<br />Score:  67<br />Predicted risk: 0.235768331\",\"Outcome category: 1<br />Score:  68<br />Predicted risk: 0.222581278\",\"Outcome category: 1<br />Score:  69<br />Predicted risk: 0.209929199\",\"Outcome category: 1<br />Score:  70<br />Predicted risk: 0.197813302\",\"Outcome category: 1<br />Score:  71<br />Predicted risk: 0.186231838\",\"Outcome category: 1<br />Score:  72<br />Predicted risk: 0.175180364\",\"Outcome category: 1<br />Score:  73<br />Predicted risk: 0.164652019\",\"Outcome category: 1<br />Score:  74<br />Predicted risk: 0.154637798\",\"Outcome category: 1<br />Score:  75<br />Predicted risk: 0.145126833\",\"Outcome category: 1<br />Score:  76<br />Predicted risk: 0.136106654\",\"Outcome category: 1<br />Score:  77<br />Predicted risk: 0.127563456\",\"Outcome category: 1<br />Score:  78<br />Predicted risk: 0.119482335\",\"Outcome category: 1<br />Score:  79<br />Predicted risk: 0.111847520\",\"Outcome category: 1<br />Score:  80<br />Predicted risk: 0.104642585\",\"Outcome category: 1<br />Score:  81<br />Predicted risk: 0.097850640\",\"Outcome category: 1<br />Score:  82<br />Predicted risk: 0.091454505\",\"Outcome category: 1<br />Score:  83<br />Predicted risk: 0.085436867\",\"Outcome category: 1<br />Score:  84<br />Predicted risk: 0.079780416\",\"Outcome category: 1<br />Score:  85<br />Predicted risk: 0.074467964\",\"Outcome category: 1<br />Score:  86<br />Predicted risk: 0.069482549\",\"Outcome category: 1<br />Score:  87<br />Predicted risk: 0.064807523\",\"Outcome category: 1<br />Score:  88<br />Predicted risk: 0.060426623\",\"Outcome category: 1<br />Score:  89<br />Predicted risk: 0.056324029\",\"Outcome category: 1<br />Score:  90<br />Predicted risk: 0.052484417\",\"Outcome category: 1<br />Score:  91<br />Predicted risk: 0.048892990\",\"Outcome category: 1<br />Score:  92<br />Predicted risk: 0.045535509\",\"Outcome category: 1<br />Score:  93<br />Predicted risk: 0.042398307\",\"Outcome category: 1<br />Score:  94<br />Predicted risk: 0.039468308\",\"Outcome category: 1<br />Score:  95<br />Predicted risk: 0.036733024\",\"Outcome category: 1<br />Score:  96<br />Predicted risk: 0.034180559\",\"Outcome category: 1<br />Score:  97<br />Predicted risk: 0.031799601\",\"Outcome category: 1<br />Score:  98<br />Predicted risk: 0.029579417\",\"Outcome category: 1<br />Score:  99<br />Predicted risk: 0.027509838\",\"Outcome category: 1<br />Score: 100<br />Predicted risk: 0.025581243\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(248,118,109,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"1\",\"legendgroup\":\"1\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(248,118,109,1)\",\"opacity\":1,\"size\":3.77952755905512,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(248,118,109,1)\"}},\"frame\":null},{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"y\":[0.0159233673666118,0.0171223297556443,0.0184086747439061,0.019788316411585,0.0212674975390309,0.0228527962703565,0.0245511307484305,0.0263697612637737,0.0283162893996802,0.0303986535917737,0.0326251204527944,0.0350042711436565,0.0375449820010132,0.0402563985614686,0.043147902055459,0.0462290673825219,0.049509611527712,0.0529993313405379,0.0567080295779916,0.0606454281178388,0.0648210672839067,0.0692441902989613,0.0739236120007752,0.0788675711314328,0.084083565747087,0.0895781716032619,0.0953568437564059,0.101423702091214,0.107781302038334,0.11443039238823,0.121369662829712,0.128595484636228,0.136101648773547,0.143879106585999,0.151915719104717,0.160196021872484,0.168701012950759,0.177407972414518,0.186290322094549,0.195317534538343,0.204455100075391,0.213664560441778,0.222903616604629,0.232126317205745,0.241283332411609,0.250322315931929,0.259188355593468,0.267824510197626,0.276172427539622,0.284173035534797,0.291767295508452,0.298897003992123,0.305505626963282,0.311539148490456,0.316946914308509,0.321682450033129,0.325704233585283,0.328976401960337,0.331469373736089,0.333160370631855,0.334033823942216,0.33408165468551,0.333303419721033,0.331706319778244,0.329305069174757,0.326121630841235,0.322184823984215,0.317529815170049,0.312197506681417,0.306233838572682,0.299689022840692,0.29261672946578,0.285073244723066,0.277116622106385,0.268805845467568,0.260200022604618,0.251357625614467,0.242335791963835,0.233189697547143,0.223972010124792,0.214732428601166,0.205517310735726,0.196369389194904,0.187327573440535,0.178426832882323,0.169698155042899,0.161168571215077,0.152861241230397,0.144795588484492,0.13698747624181,0.129449416422133,0.122190802500167,0.115218158770884,0.108535398991818,0.102144088257864,0.0960437028483668,0.0902318836718874,0.0847046797896678,0.0794567793008129,0.0744817256038718,0.0697721177004055],\"text\":[\"Outcome category: 2<br />Score:   0<br />Predicted risk: 0.015923367\",\"Outcome category: 2<br />Score:   1<br />Predicted risk: 0.017122330\",\"Outcome category: 2<br />Score:   2<br />Predicted risk: 0.018408675\",\"Outcome category: 2<br />Score:   3<br />Predicted risk: 0.019788316\",\"Outcome category: 2<br />Score:   4<br />Predicted risk: 0.021267498\",\"Outcome category: 2<br />Score:   5<br />Predicted risk: 0.022852796\",\"Outcome category: 2<br />Score:   6<br />Predicted risk: 0.024551131\",\"Outcome category: 2<br />Score:   7<br />Predicted risk: 0.026369761\",\"Outcome category: 2<br />Score:   8<br />Predicted risk: 0.028316289\",\"Outcome category: 2<br />Score:   9<br />Predicted risk: 0.030398654\",\"Outcome category: 2<br />Score:  10<br />Predicted risk: 0.032625120\",\"Outcome category: 2<br />Score:  11<br />Predicted risk: 0.035004271\",\"Outcome category: 2<br />Score:  12<br />Predicted risk: 0.037544982\",\"Outcome category: 2<br />Score:  13<br />Predicted risk: 0.040256399\",\"Outcome category: 2<br />Score:  14<br />Predicted risk: 0.043147902\",\"Outcome category: 2<br />Score:  15<br />Predicted risk: 0.046229067\",\"Outcome category: 2<br />Score:  16<br />Predicted risk: 0.049509612\",\"Outcome category: 2<br />Score:  17<br />Predicted risk: 0.052999331\",\"Outcome category: 2<br />Score:  18<br />Predicted risk: 0.056708030\",\"Outcome category: 2<br />Score:  19<br />Predicted risk: 0.060645428\",\"Outcome category: 2<br />Score:  20<br />Predicted risk: 0.064821067\",\"Outcome category: 2<br />Score:  21<br />Predicted risk: 0.069244190\",\"Outcome category: 2<br />Score:  22<br />Predicted risk: 0.073923612\",\"Outcome category: 2<br />Score:  23<br />Predicted risk: 0.078867571\",\"Outcome category: 2<br />Score:  24<br />Predicted risk: 0.084083566\",\"Outcome category: 2<br />Score:  25<br />Predicted risk: 0.089578172\",\"Outcome category: 2<br />Score:  26<br />Predicted risk: 0.095356844\",\"Outcome category: 2<br />Score:  27<br />Predicted risk: 0.101423702\",\"Outcome category: 2<br />Score:  28<br />Predicted risk: 0.107781302\",\"Outcome category: 2<br />Score:  29<br />Predicted risk: 0.114430392\",\"Outcome category: 2<br />Score:  30<br />Predicted risk: 0.121369663\",\"Outcome category: 2<br />Score:  31<br />Predicted risk: 0.128595485\",\"Outcome category: 2<br />Score:  32<br />Predicted risk: 0.136101649\",\"Outcome category: 2<br />Score:  33<br />Predicted risk: 0.143879107\",\"Outcome category: 2<br />Score:  34<br />Predicted risk: 0.151915719\",\"Outcome category: 2<br />Score:  35<br />Predicted risk: 0.160196022\",\"Outcome category: 2<br />Score:  36<br />Predicted risk: 0.168701013\",\"Outcome category: 2<br />Score:  37<br />Predicted risk: 0.177407972\",\"Outcome category: 2<br />Score:  38<br />Predicted risk: 0.186290322\",\"Outcome category: 2<br />Score:  39<br />Predicted risk: 0.195317535\",\"Outcome category: 2<br />Score:  40<br />Predicted risk: 0.204455100\",\"Outcome category: 2<br />Score:  41<br />Predicted risk: 0.213664560\",\"Outcome category: 2<br />Score:  42<br />Predicted risk: 0.222903617\",\"Outcome category: 2<br />Score:  43<br />Predicted risk: 0.232126317\",\"Outcome category: 2<br />Score:  44<br />Predicted risk: 0.241283332\",\"Outcome category: 2<br />Score:  45<br />Predicted risk: 0.250322316\",\"Outcome category: 2<br />Score:  46<br />Predicted risk: 0.259188356\",\"Outcome category: 2<br />Score:  47<br />Predicted risk: 0.267824510\",\"Outcome category: 2<br />Score:  48<br />Predicted risk: 0.276172428\",\"Outcome category: 2<br />Score:  49<br />Predicted risk: 0.284173036\",\"Outcome category: 2<br />Score:  50<br />Predicted risk: 0.291767296\",\"Outcome category: 2<br />Score:  51<br />Predicted risk: 0.298897004\",\"Outcome category: 2<br />Score:  52<br />Predicted risk: 0.305505627\",\"Outcome category: 2<br />Score:  53<br />Predicted risk: 0.311539148\",\"Outcome category: 2<br />Score:  54<br />Predicted risk: 0.316946914\",\"Outcome category: 2<br />Score:  55<br />Predicted risk: 0.321682450\",\"Outcome category: 2<br />Score:  56<br />Predicted risk: 0.325704234\",\"Outcome category: 2<br />Score:  57<br />Predicted risk: 0.328976402\",\"Outcome category: 2<br />Score:  58<br />Predicted risk: 0.331469374\",\"Outcome category: 2<br />Score:  59<br />Predicted risk: 0.333160371\",\"Outcome category: 2<br />Score:  60<br />Predicted risk: 0.334033824\",\"Outcome category: 2<br />Score:  61<br />Predicted risk: 0.334081655\",\"Outcome category: 2<br />Score:  62<br />Predicted risk: 0.333303420\",\"Outcome category: 2<br />Score:  63<br />Predicted risk: 0.331706320\",\"Outcome category: 2<br />Score:  64<br />Predicted risk: 0.329305069\",\"Outcome category: 2<br />Score:  65<br />Predicted risk: 0.326121631\",\"Outcome category: 2<br />Score:  66<br />Predicted risk: 0.322184824\",\"Outcome category: 2<br />Score:  67<br />Predicted risk: 0.317529815\",\"Outcome category: 2<br />Score:  68<br />Predicted risk: 0.312197507\",\"Outcome category: 2<br />Score:  69<br />Predicted risk: 0.306233839\",\"Outcome category: 2<br />Score:  70<br />Predicted risk: 0.299689023\",\"Outcome category: 2<br />Score:  71<br />Predicted risk: 0.292616729\",\"Outcome category: 2<br />Score:  72<br />Predicted risk: 0.285073245\",\"Outcome category: 2<br />Score:  73<br />Predicted risk: 0.277116622\",\"Outcome category: 2<br />Score:  74<br />Predicted risk: 0.268805845\",\"Outcome category: 2<br />Score:  75<br />Predicted risk: 0.260200023\",\"Outcome category: 2<br />Score:  76<br />Predicted risk: 0.251357626\",\"Outcome category: 2<br />Score:  77<br />Predicted risk: 0.242335792\",\"Outcome category: 2<br />Score:  78<br />Predicted risk: 0.233189698\",\"Outcome category: 2<br />Score:  79<br />Predicted risk: 0.223972010\",\"Outcome category: 2<br />Score:  80<br />Predicted risk: 0.214732429\",\"Outcome category: 2<br />Score:  81<br />Predicted risk: 0.205517311\",\"Outcome category: 2<br />Score:  82<br />Predicted risk: 0.196369389\",\"Outcome category: 2<br />Score:  83<br />Predicted risk: 0.187327573\",\"Outcome category: 2<br />Score:  84<br />Predicted risk: 0.178426833\",\"Outcome category: 2<br />Score:  85<br />Predicted risk: 0.169698155\",\"Outcome category: 2<br />Score:  86<br />Predicted risk: 0.161168571\",\"Outcome category: 2<br />Score:  87<br />Predicted risk: 0.152861241\",\"Outcome category: 2<br />Score:  88<br />Predicted risk: 0.144795588\",\"Outcome category: 2<br />Score:  89<br />Predicted risk: 0.136987476\",\"Outcome category: 2<br />Score:  90<br />Predicted risk: 0.129449416\",\"Outcome category: 2<br />Score:  91<br />Predicted risk: 0.122190803\",\"Outcome category: 2<br />Score:  92<br />Predicted risk: 0.115218159\",\"Outcome category: 2<br />Score:  93<br />Predicted risk: 0.108535399\",\"Outcome category: 2<br />Score:  94<br />Predicted risk: 0.102144088\",\"Outcome category: 2<br />Score:  95<br />Predicted risk: 0.096043703\",\"Outcome category: 2<br />Score:  96<br />Predicted risk: 0.090231884\",\"Outcome category: 2<br />Score:  97<br />Predicted risk: 0.084704680\",\"Outcome category: 2<br />Score:  98<br />Predicted risk: 0.079456779\",\"Outcome category: 2<br />Score:  99<br />Predicted risk: 0.074481726\",\"Outcome category: 2<br />Score: 100<br />Predicted risk: 0.069772118\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,186,56,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"2\",\"legendgroup\":\"2\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,186,56,1)\",\"opacity\":1,\"size\":3.77952755905512,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(0,186,56,1)\"}},\"frame\":null},{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"y\":[0.00539650842628858,0.00581243364927353,0.00626021371680252,0.00674225606203505,0.00726114490634799,0.00781965341672064,0.00842075656559738,0.00906764471130883,0.00976373791322238,0.0105127009908615,0.0113184593301104,0.0121852154321189,0.0131174661914408,0.0141200208790511,0.0151980197929331,0.0163569535236567,0.0176026827644625,0.0189414585745443,0.0203799429801288,0.0219252297702731,0.0235848653126821,0.0253668691789589,0.0272797543282349,0.0293325465527845,0.0315348028388115,0.0338966282399413,0.0364286908000476,0.0391422339960112,0.0420490861001703,0.0451616657871535,0.0484929832313705,0.0520566358609216,0.0558667978527893,0.0599382023751003,0.0642861155078315,0.0689263007070421,0.0738749726237853,0.0791487390522397,0.0847645297681029,0.0907395110344169,0.0970909846049754,0.10383627015304,0.110992570203346,0.118576816856321,0.126605499872692,0.135094476040705,0.14405876018197,0.153512298667676,0.163467726913705,0.173936112995496,0.184926690260915,0.196446582605166,0.208500526882722,0.221090597737186,0.234215940894001,0.247872521640086,0.262052895761411,0.27674601057424,0.291937043819117,0.307607288043271,0.323734087639828,0.340290834916324,0.357247030421905,0.374568411283651,0.392217149520906,0.410152120278486,0.428329237722825,0.446701854075895,0.465221215029412,0.483836962702521,0.502497675493754,0.521151432736436,0.539746391080904,0.558231359056213,0.576556356337321,0.59467314485635,0.612535720011363,0.630100751776158,0.647327967409173,0.664180469591279,0.680624986075641,0.696632049192993,0.712176105716054,0.727235559555599,0.741792751465874,0.755833881328399,0.769348879633651,0.782331235483827,0.794777788810122,0.806688494563289,0.818066166436269,0.828916207259326,0.839246332620919,0.849066293561236,0.858387603406065,0.867223272998095,0.875587557775834,0.883495719375516,0.890963803710011,0.898008436825844,0.904646639263998],\"text\":[\"Outcome category: 3<br />Score:   0<br />Predicted risk: 0.005396508\",\"Outcome category: 3<br />Score:   1<br />Predicted risk: 0.005812434\",\"Outcome category: 3<br />Score:   2<br />Predicted risk: 0.006260214\",\"Outcome category: 3<br />Score:   3<br />Predicted risk: 0.006742256\",\"Outcome category: 3<br />Score:   4<br />Predicted risk: 0.007261145\",\"Outcome category: 3<br />Score:   5<br />Predicted risk: 0.007819653\",\"Outcome category: 3<br />Score:   6<br />Predicted risk: 0.008420757\",\"Outcome category: 3<br />Score:   7<br />Predicted risk: 0.009067645\",\"Outcome category: 3<br />Score:   8<br />Predicted risk: 0.009763738\",\"Outcome category: 3<br />Score:   9<br />Predicted risk: 0.010512701\",\"Outcome category: 3<br />Score:  10<br />Predicted risk: 0.011318459\",\"Outcome category: 3<br />Score:  11<br />Predicted risk: 0.012185215\",\"Outcome category: 3<br />Score:  12<br />Predicted risk: 0.013117466\",\"Outcome category: 3<br />Score:  13<br />Predicted risk: 0.014120021\",\"Outcome category: 3<br />Score:  14<br />Predicted risk: 0.015198020\",\"Outcome category: 3<br />Score:  15<br />Predicted risk: 0.016356954\",\"Outcome category: 3<br />Score:  16<br />Predicted risk: 0.017602683\",\"Outcome category: 3<br />Score:  17<br />Predicted risk: 0.018941459\",\"Outcome category: 3<br />Score:  18<br />Predicted risk: 0.020379943\",\"Outcome category: 3<br />Score:  19<br />Predicted risk: 0.021925230\",\"Outcome category: 3<br />Score:  20<br />Predicted risk: 0.023584865\",\"Outcome category: 3<br />Score:  21<br />Predicted risk: 0.025366869\",\"Outcome category: 3<br />Score:  22<br />Predicted risk: 0.027279754\",\"Outcome category: 3<br />Score:  23<br />Predicted risk: 0.029332547\",\"Outcome category: 3<br />Score:  24<br />Predicted risk: 0.031534803\",\"Outcome category: 3<br />Score:  25<br />Predicted risk: 0.033896628\",\"Outcome category: 3<br />Score:  26<br />Predicted risk: 0.036428691\",\"Outcome category: 3<br />Score:  27<br />Predicted risk: 0.039142234\",\"Outcome category: 3<br />Score:  28<br />Predicted risk: 0.042049086\",\"Outcome category: 3<br />Score:  29<br />Predicted risk: 0.045161666\",\"Outcome category: 3<br />Score:  30<br />Predicted risk: 0.048492983\",\"Outcome category: 3<br />Score:  31<br />Predicted risk: 0.052056636\",\"Outcome category: 3<br />Score:  32<br />Predicted risk: 0.055866798\",\"Outcome category: 3<br />Score:  33<br />Predicted risk: 0.059938202\",\"Outcome category: 3<br />Score:  34<br />Predicted risk: 0.064286116\",\"Outcome category: 3<br />Score:  35<br />Predicted risk: 0.068926301\",\"Outcome category: 3<br />Score:  36<br />Predicted risk: 0.073874973\",\"Outcome category: 3<br />Score:  37<br />Predicted risk: 0.079148739\",\"Outcome category: 3<br />Score:  38<br />Predicted risk: 0.084764530\",\"Outcome category: 3<br />Score:  39<br />Predicted risk: 0.090739511\",\"Outcome category: 3<br />Score:  40<br />Predicted risk: 0.097090985\",\"Outcome category: 3<br />Score:  41<br />Predicted risk: 0.103836270\",\"Outcome category: 3<br />Score:  42<br />Predicted risk: 0.110992570\",\"Outcome category: 3<br />Score:  43<br />Predicted risk: 0.118576817\",\"Outcome category: 3<br />Score:  44<br />Predicted risk: 0.126605500\",\"Outcome category: 3<br />Score:  45<br />Predicted risk: 0.135094476\",\"Outcome category: 3<br />Score:  46<br />Predicted risk: 0.144058760\",\"Outcome category: 3<br />Score:  47<br />Predicted risk: 0.153512299\",\"Outcome category: 3<br />Score:  48<br />Predicted risk: 0.163467727\",\"Outcome category: 3<br />Score:  49<br />Predicted risk: 0.173936113\",\"Outcome category: 3<br />Score:  50<br />Predicted risk: 0.184926690\",\"Outcome category: 3<br />Score:  51<br />Predicted risk: 0.196446583\",\"Outcome category: 3<br />Score:  52<br />Predicted risk: 0.208500527\",\"Outcome category: 3<br />Score:  53<br />Predicted risk: 0.221090598\",\"Outcome category: 3<br />Score:  54<br />Predicted risk: 0.234215941\",\"Outcome category: 3<br />Score:  55<br />Predicted risk: 0.247872522\",\"Outcome category: 3<br />Score:  56<br />Predicted risk: 0.262052896\",\"Outcome category: 3<br />Score:  57<br />Predicted risk: 0.276746011\",\"Outcome category: 3<br />Score:  58<br />Predicted risk: 0.291937044\",\"Outcome category: 3<br />Score:  59<br />Predicted risk: 0.307607288\",\"Outcome category: 3<br />Score:  60<br />Predicted risk: 0.323734088\",\"Outcome category: 3<br />Score:  61<br />Predicted risk: 0.340290835\",\"Outcome category: 3<br />Score:  62<br />Predicted risk: 0.357247030\",\"Outcome category: 3<br />Score:  63<br />Predicted risk: 0.374568411\",\"Outcome category: 3<br />Score:  64<br />Predicted risk: 0.392217150\",\"Outcome category: 3<br />Score:  65<br />Predicted risk: 0.410152120\",\"Outcome category: 3<br />Score:  66<br />Predicted risk: 0.428329238\",\"Outcome category: 3<br />Score:  67<br />Predicted risk: 0.446701854\",\"Outcome category: 3<br />Score:  68<br />Predicted risk: 0.465221215\",\"Outcome category: 3<br />Score:  69<br />Predicted risk: 0.483836963\",\"Outcome category: 3<br />Score:  70<br />Predicted risk: 0.502497675\",\"Outcome category: 3<br />Score:  71<br />Predicted risk: 0.521151433\",\"Outcome category: 3<br />Score:  72<br />Predicted risk: 0.539746391\",\"Outcome category: 3<br />Score:  73<br />Predicted risk: 0.558231359\",\"Outcome category: 3<br />Score:  74<br />Predicted risk: 0.576556356\",\"Outcome category: 3<br />Score:  75<br />Predicted risk: 0.594673145\",\"Outcome category: 3<br />Score:  76<br />Predicted risk: 0.612535720\",\"Outcome category: 3<br />Score:  77<br />Predicted risk: 0.630100752\",\"Outcome category: 3<br />Score:  78<br />Predicted risk: 0.647327967\",\"Outcome category: 3<br />Score:  79<br />Predicted risk: 0.664180470\",\"Outcome category: 3<br />Score:  80<br />Predicted risk: 0.680624986\",\"Outcome category: 3<br />Score:  81<br />Predicted risk: 0.696632049\",\"Outcome category: 3<br />Score:  82<br />Predicted risk: 0.712176106\",\"Outcome category: 3<br />Score:  83<br />Predicted risk: 0.727235560\",\"Outcome category: 3<br />Score:  84<br />Predicted risk: 0.741792751\",\"Outcome category: 3<br />Score:  85<br />Predicted risk: 0.755833881\",\"Outcome category: 3<br />Score:  86<br />Predicted risk: 0.769348880\",\"Outcome category: 3<br />Score:  87<br />Predicted risk: 0.782331235\",\"Outcome category: 3<br />Score:  88<br />Predicted risk: 0.794777789\",\"Outcome category: 3<br />Score:  89<br />Predicted risk: 0.806688495\",\"Outcome category: 3<br />Score:  90<br />Predicted risk: 0.818066166\",\"Outcome category: 3<br />Score:  91<br />Predicted risk: 0.828916207\",\"Outcome category: 3<br />Score:  92<br />Predicted risk: 0.839246333\",\"Outcome category: 3<br />Score:  93<br />Predicted risk: 0.849066294\",\"Outcome category: 3<br />Score:  94<br />Predicted risk: 0.858387603\",\"Outcome category: 3<br />Score:  95<br />Predicted risk: 0.867223273\",\"Outcome category: 3<br />Score:  96<br />Predicted risk: 0.875587558\",\"Outcome category: 3<br />Score:  97<br />Predicted risk: 0.883495719\",\"Outcome category: 3<br />Score:  98<br />Predicted risk: 0.890963804\",\"Outcome category: 3<br />Score:  99<br />Predicted risk: 0.898008437\",\"Outcome category: 3<br />Score: 100<br />Predicted risk: 0.904646639\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(97,156,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"3\",\"legendgroup\":\"3\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(97,156,255,1)\",\"opacity\":1,\"size\":3.77952755905512,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(97,156,255,1)\"}},\"frame\":null},{\"orientation\":\"v\",\"width\":[0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.899999999999999,0.900000000000002,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006,0.900000000000006],\"base\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,89],\"y\":[0.00025,0.0005,0.001,0.0025,0.003,0.00325,0.0035,0.0095,0.00975,0.014,0.004,0.005,0.00925,0.0085,0.01125,0.00875,0.02075,0.03825,0.0335,0.05825,0.01225,0.0285,0.043,0.0325,0.05875,0.02125,0.03825,0.0425,0.02625,0.05125,0.0275,0.02625,0.0335,0.022,0.02675,0.0185,0.02125,0.02575,0.0135,0.02325,0.017,0.0145,0.011,0.01225,0.01125,0.01175,0.01,0.00825,0.0065,0.0065,0.008,0.005,0.005,0.005,0.004,0.0035,0.00325,0.0025,0.002,0.00225,0.00125,0.00225,0.002,0.001,0.00075,0.00075,0.001,0.00075,0.00025,0.00075,0.00025,0.0005,0.00075,0.00025,0.00025,0.00025],\"text\":[\"Score:  0<br />Proportion: 0.00025\",\"Score:  1<br />Proportion: 0.00050\",\"Score:  2<br />Proportion: 0.00100\",\"Score:  3<br />Proportion: 0.00250\",\"Score:  4<br />Proportion: 0.00300\",\"Score:  5<br />Proportion: 0.00325\",\"Score:  6<br />Proportion: 0.00350\",\"Score:  7<br />Proportion: 0.00950\",\"Score:  8<br />Proportion: 0.00975\",\"Score:  9<br />Proportion: 0.01400\",\"Score: 10<br />Proportion: 0.00400\",\"Score: 11<br />Proportion: 0.00500\",\"Score: 12<br />Proportion: 0.00925\",\"Score: 13<br />Proportion: 0.00850\",\"Score: 14<br />Proportion: 0.01125\",\"Score: 15<br />Proportion: 0.00875\",\"Score: 16<br />Proportion: 0.02075\",\"Score: 17<br />Proportion: 0.03825\",\"Score: 18<br />Proportion: 0.03350\",\"Score: 19<br />Proportion: 0.05825\",\"Score: 20<br />Proportion: 0.01225\",\"Score: 21<br />Proportion: 0.02850\",\"Score: 22<br />Proportion: 0.04300\",\"Score: 23<br />Proportion: 0.03250\",\"Score: 24<br />Proportion: 0.05875\",\"Score: 25<br />Proportion: 0.02125\",\"Score: 26<br />Proportion: 0.03825\",\"Score: 27<br />Proportion: 0.04250\",\"Score: 28<br />Proportion: 0.02625\",\"Score: 29<br />Proportion: 0.05125\",\"Score: 30<br />Proportion: 0.02750\",\"Score: 31<br />Proportion: 0.02625\",\"Score: 32<br />Proportion: 0.03350\",\"Score: 33<br />Proportion: 0.02200\",\"Score: 34<br />Proportion: 0.02675\",\"Score: 35<br />Proportion: 0.01850\",\"Score: 36<br />Proportion: 0.02125\",\"Score: 37<br />Proportion: 0.02575\",\"Score: 38<br />Proportion: 0.01350\",\"Score: 39<br />Proportion: 0.02325\",\"Score: 40<br />Proportion: 0.01700\",\"Score: 41<br />Proportion: 0.01450\",\"Score: 42<br />Proportion: 0.01100\",\"Score: 43<br />Proportion: 0.01225\",\"Score: 44<br />Proportion: 0.01125\",\"Score: 45<br />Proportion: 0.01175\",\"Score: 46<br />Proportion: 0.01000\",\"Score: 47<br />Proportion: 0.00825\",\"Score: 48<br />Proportion: 0.00650\",\"Score: 49<br />Proportion: 0.00650\",\"Score: 50<br />Proportion: 0.00800\",\"Score: 51<br />Proportion: 0.00500\",\"Score: 52<br />Proportion: 0.00500\",\"Score: 53<br />Proportion: 0.00500\",\"Score: 54<br />Proportion: 0.00400\",\"Score: 55<br />Proportion: 0.00350\",\"Score: 56<br />Proportion: 0.00325\",\"Score: 57<br />Proportion: 0.00250\",\"Score: 58<br />Proportion: 0.00200\",\"Score: 59<br />Proportion: 0.00225\",\"Score: 60<br />Proportion: 0.00125\",\"Score: 61<br />Proportion: 0.00225\",\"Score: 62<br />Proportion: 0.00200\",\"Score: 63<br />Proportion: 0.00100\",\"Score: 64<br />Proportion: 0.00075\",\"Score: 65<br />Proportion: 0.00075\",\"Score: 66<br />Proportion: 0.00100\",\"Score: 67<br />Proportion: 0.00075\",\"Score: 68<br />Proportion: 0.00025\",\"Score: 69<br />Proportion: 0.00075\",\"Score: 70<br />Proportion: 0.00025\",\"Score: 71<br />Proportion: 0.00050\",\"Score: 72<br />Proportion: 0.00075\",\"Score: 73<br />Proportion: 0.00025\",\"Score: 76<br />Proportion: 0.00025\",\"Score: 89<br />Proportion: 0.00025\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(89,89,89,1)\",\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"showlegend\":false,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"25\",\"50\",\"75\",\"100\"],\"tickvals\":[0,25,50,75,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"25\",\"50\",\"75\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":15.9402241594022},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176,\"showgrid\":true,\"gridcolor\":\"rgba(229,229,229,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Score\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"xaxis2\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"25\",\"50\",\"75\",\"100\"],\"tickvals\":[0,25,50,75,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"25\",\"50\",\"75\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":15.9402241594022},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176,\"showgrid\":true,\"gridcolor\":\"rgba(229,229,229,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y2\",\"title\":{\"text\":\"Score\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis2\":{\"domain\":[0,0.205714285714286],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-0.0029375,0.0616875],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.02\",\"0.04\",\"0.06\"],\"tickvals\":[0,0.02,0.04,0.06],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.02\",\"0.04\",\"0.06\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":15.9402241594022},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176,\"showgrid\":true,\"gridcolor\":\"rgba(229,229,229,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x2\",\"title\":{\"text\":\"Proportion<br />of subjects\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0.365714285714286,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-0.05,1.05],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\",\"1.00\"],\"tickvals\":[0,0.25,0.5,0.75,1],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\",\"1.00\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":15.9402241594022},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176,\"showgrid\":true,\"gridcolor\":\"rgba(229,229,229,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Predicted risk\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"annotations\":[],\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0.365714285714286,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":0.205714285714286}],\"images\":[],\"margin\":{\"t\":26.2283105022831,\"r\":7.30593607305936,\"b\":44.4333748443338,\"l\":57.4512245745123},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"title\":{\"text\":\"Points indicate attainable final scores\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.5342465753425},\"x\":0,\"xref\":\"paper\"},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"title\":{\"text\":\"Outcome category\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"attrs\":{\"13d8e2643895c\":{\"colour\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"13d8e1bef0aa4\":{\"colour\":{},\"x\":{},\"y\":{}},\"13d8e791d9278\":{\"x\":{},\"y\":{},\"type\":\"bar\"}},\"source\":\"A\",\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n- Given the proportion of subjects for each score value (see figure above),\nselect reasonable score breaks (Default: 5, 10, 15, ..., 70) to report the\naverage predicted risk within each score interval, which can be used to predict\nrisk for a new subject.\n- When selecting score breaks, avoid creating score intervals with too few observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconversion_table_ordinal(pred_score = pred_score, \n                         score_breaks = seq(from = 5, to = 70, by = 5), \n                         digits = 4)\n```\n\n::: {.cell-output-display}\n|Score    | Predicted risk, category 1| Predicted risk, category 2| Predicted risk, category 3|\n|:--------|--------------------------:|--------------------------:|--------------------------:|\n|[0,5]    |                     0.9742|                     0.0192|                     0.0065|\n|(5,10]   |                     0.9617|                     0.0285|                     0.0098|\n|(10,15]  |                     0.9454|                     0.0404|                     0.0142|\n|(15,20]  |                     0.9226|                     0.0569|                     0.0205|\n|(20,25]  |                     0.8914|                     0.0791|                     0.0295|\n|(25,30]  |                     0.8497|                     0.1081|                     0.0423|\n|(30,35]  |                     0.7956|                     0.1441|                     0.0602|\n|(35,40]  |                     0.7284|                     0.1864|                     0.0851|\n|(40,45]  |                     0.6489|                     0.2321|                     0.1190|\n|(45,50]  |                     0.5602|                     0.2758|                     0.1640|\n|(50,55]  |                     0.4675|                     0.3109|                     0.2216|\n|(55,60]  |                     0.3769|                     0.3307|                     0.2924|\n|(60,65]  |                     0.2942|                     0.3309|                     0.3749|\n|(65,70]  |                     0.2231|                     0.3116|                     0.4653|\n|(70,100] |                     0.0840|                     0.1718|                     0.7442|\n:::\n:::\n\n\n## Demo 2: small sample {#demo2}\n\nIn Demo 2, we demonstrate AutoScore-Ordinal application for a small dataset with\n5000 samples using cross-validation.\n\n### Get small dataset with 5000 samples\n\nFor demonstration purpose, randomly sample a small dataset with 5000 samples\nfrom original sample data, stratified by the outcome.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"sample_data_ordinal_small\")\n```\n:::\n\n\n### Prepare training, validation, and test datasets\n\n- Option 1: Prepare two separate datasets to train and test models.\n- Option 2: Use demo codes below to randomly split your dataset into training\nand test datasets (70% and 30%, respectively). For cross-validation, `train_set`\nis equal to `validation_set` and the ratio of `validation_set` should be 0. Then\ncross-validation will be implemented in the STEP(ii),\n`AutoScore_parsimony_Ordinal()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(4)\nout_split <- split_data(data = sample_data_ordinal_small, \n                        ratio = c(0.7, 0, 0.3), cross_validation = TRUE,\n                        strat_by_label = TRUE)\ntrain_set <- out_split$train_set\nvalidation_set <- out_split$validation_set\ntest_set <- out_split$test_set\n```\n:::\n\n\n### STEP(i): Generate variable ranking list \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 1</p>\n\n- `ntree`: Number of trees in the random forest algorithm (Default: 100).\n\n\n::: {.cell hash='06-autoscore_ordinal_cache/html/rank_ord_small_0ff49cc03486986d270a93138287fa85'}\n\n```{.r .cell-code}\nranking <- AutoScore_rank_Ordinal(train_set = train_set, ntree = 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe ranking based on variable importance was shown below for each variable: \n      Age     Lab_A    Util_D   Vital_A   Vital_F   Vital_E   Vital_D     Lab_B \n98.791839 98.073161 97.021662 93.282141 92.469166 91.677271 82.051893 72.462999 \n    Lab_C    Util_B    Util_C   Vital_C   Vital_B    Util_A  Comorb_A    Gender \n70.507041 57.778464 57.270171 45.468903 43.633031 26.120379 25.414958 13.405373 \n Comorb_B  Comorb_D  Comorb_C  Comorb_E \n 9.595971  7.320633  4.477519  2.993603 \n```\n:::\n\n::: {.cell-output-display}\n![](06-autoscore_ordinal_files/figure-html/rank_ord_small-1.png){width=576}\n:::\n:::\n\n\n### STEP(ii): Select the best model with parsimony plot \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Modules 2+3+4</p>\n\n-   `n_min`: Minimum number of selected variables (Default: 1).\n-   `n_max`: Maximum number of selected variables (Default: 20).\n-   `categorize`: Methods for categorizing continuous variables. Options include\n`\"quantile\"` or `\"kmeans\"` (Default: `\"quantile\"`).\n-   `quantiles`: Predefined quantiles to convert continuous variables to\ncategorical ones (Default: `c(0, 0.05, 0.2, 0.8, 0.95, 1)`). Available if \n`categorize = \"quantile\"`.\n-   `max_cluster`: The max number of cluster (Default: 5). Available if\n`categorize = \"kmeans\"`.\n-   `max_score`: Maximum total score (Default: 100).\n-   `auc_lim_min`: y-axis limits (min) of the parsimony plot (Default: 0.5)\n-   `auc_lim_max`: y-axis limits (max) of the parsimony plot (Default: `\"adaptive\"`)\n-   `link`: link function in the ordinal regression, which affects predictive\nperformance. Options include `\"logit\"` (for proportional odds model),\n`\"cloglog\"` (for proportional hazard model) and `\"probit\"` (Default: `\"logit\"`).\n**Use the same link throughout descriptive analysis and model building steps.**\n\n\n::: {.cell hash='06-autoscore_ordinal_cache/html/mauc_ord_small_e751cbd7b9395a0515f6fc0b4023dadf'}\n\n```{.r .cell-code}\nmAUC <- AutoScore_parsimony_Ordinal(\n  train_set = train_set, validation_set = validation_set, link = \"logit\",\n  rank = ranking, max_score = 100, n_min = 1, n_max = 20,\n  categorize = \"quantile\", quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), \n  auc_lim_min = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelect 1 variables:  Mean area under the curve: 0.4508142 \nSelect 2 variables:  Mean area under the curve: 0.5108712 \nSelect 3 variables:  Mean area under the curve: 0.6309579 \nSelect 4 variables:  Mean area under the curve: 0.6432916 \nSelect 5 variables:  Mean area under the curve: 0.6565442 \nSelect 6 variables:  Mean area under the curve: 0.6558072 \nSelect 7 variables:  Mean area under the curve: 0.6567401 \nSelect 8 variables:  Mean area under the curve: 0.6570538 \nSelect 9 variables:  Mean area under the curve: 0.6583098 \nSelect 10 variables:  Mean area under the curve: 0.7177025 \nSelect 11 variables:  Mean area under the curve: 0.7177396 \nSelect 12 variables:  Mean area under the curve: 0.7179181 \nSelect 13 variables:  Mean area under the curve: 0.7187799 \nSelect 14 variables:  Mean area under the curve: 0.7215945 \nSelect 15 variables:  Mean area under the curve: 0.7641033 \nSelect 16 variables:  Mean area under the curve: 0.7646344 \nSelect 17 variables:  Mean area under the curve: 0.7643153 \nSelect 18 variables:  Mean area under the curve: 0.7641064 \nSelect 19 variables:  Mean area under the curve: 0.7643961 \nSelect 20 variables:  Mean area under the curve: 0.7647775 \n```\n:::\n\n::: {.cell-output-display}\n![](06-autoscore_ordinal_files/figure-html/mauc_ord_small-1.png){width=672}\n:::\n:::\n\n\n-   Determine the optimal number of variables (`num_var`) based on the parsimony plot obtained in STEP(ii).\n-   The final list of variables is the first `num_var` variables in the ranked list `ranking` obtained in STEP(i).\n-   Optional: User can adjust the finally included variables `final_variables` based on the clinical preferences and knowledge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 1: Top 6 variables are selected\nnum_var <- 6\nfinal_variables <- names(ranking[1:num_var])\n\n# Example 2: Top 14 variables are selected\nnum_var <- 14\nfinal_variables <- names(ranking[1:num_var])\n\n# Example 3: Top 3 variables, the 6th, 11th and 14th variable are selected\nfinal_variables <- names(ranking[c(1:3, 6, 11, 14)])\n```\n:::\n\n\n### STEP(iii): Generate initial scores with final variables \n\n<p class=\"autoscore-module\">Re-run AutoScore-Ordinal Modules 2+3</p>\n\n- Generate `cut_vec` with current cutoffs of continuous variables, which can be\nfine-tuned in STEP(iv).\n- Performance of resulting scores is evaluated using the mean AUC across\ndichotomous classifications (mAUC), with 95% CI computed using bootstrap \n(Default: `n_boot = 100` bootstrap samples). Setting `n_boot = 1` disables\nbootstrap and reports mAUC without CI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_vec <- AutoScore_weighting_Ordinal(\n  train_set = train_set, validation_set = validation_set, \n  final_variables = final_variables, \n  max_score = 100,\n  categorize = \"quantile\",\n  quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n****Included Variables: \n  variable_name\n1           Age\n2         Lab_A\n3        Util_D\n4       Vital_E\n5        Util_C\n6        Util_A\n****Initial Scores: \n\n\n========  ===========  =====\nvariable  interval     point\n========  ===========  =====\nAge       <27            0  \n          [27,46)       19  \n          [46,78)       30  \n          [78,87)       39  \n          >=87          44  \n                            \nLab_A     <46           17  \n          [46,61)        0  \n          [61,136)       1  \n          [136,608)     13  \n          >=608         13  \n                            \nUtil_D    <0.64          9  \n          [0.64,1.3)    11  \n          [1.3,3.83)     6  \n          [3.83,5.74)    7  \n          >=5.74         0  \n                            \nVital_E   <98           14  \n          [98,111)       7  \n          [111,153)      4  \n          [153,179)      0  \n          >=179          1  \n                            \nUtil_C    <4.95          4  \n          [4.95,13.6)    7  \n          >=13.6         0  \n                            \nUtil_A    P1             6  \n          P2             0  \n          P3 and P4      3  \n========  ===========  =====\n***Performance (based on validation set):\nmAUC: 0.6400 \t 95% CI: 0.6087-0.6623 (from 100 bootstrap samples)\n***The cutoffs of each variables generated by the AutoScore-Ordinal are saved in cut_vec. You can decide whether to revise or fine-tune them \n```\n:::\n:::\n\n\n### STEP(iv): Fine-tune initial score from STEP(iii) \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 5 & Re-run AutoScore-Ordinal Modules 2+3</p>\n\nSimilar to the [large sample scenario](#fine-tune), users can fine-tune cutoff\nvalues for continuous variables, rerun AutoScore-Ordinal Modules 2+3 to generate\nthe updated scores and assess model performance of the updated model using mAUC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut_vec$Util_D <- c(2 / 3, 4 / 3, 4, 6)\ncut_vec$Lab_A <- c(45, 60, 135, 595)\ncut_vec$Age <- c(25, 45, 75, 85)\ncut_vec$Vital_A <- c(60, 70, 95, 115)\nscoring_table <- AutoScore_fine_tuning_Ordinal(\n  train_set = train_set, validation_set = validation_set, link = \"logit\",\n  final_variables = final_variables, cut_vec = cut_vec, max_score = 100, \n  n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n***Fine-tuned Scores: \n\n\n========  ============  =====\nvariable  interval      point\n========  ============  =====\nAge       <25             0  \n          [25,45)        16  \n          [45,75)        28  \n          [75,85)        37  \n          >=85           42  \n                             \nLab_A     <45            18  \n          [45,60)         0  \n          [60,135)        1  \n          [135,595)      12  \n          >=595          12  \n                             \nUtil_D    <0.667         10  \n          [0.667,1.33)   13  \n          [1.33,4)        7  \n          [4,6)          10  \n          >=6             0  \n                             \nVital_E   <98            15  \n          [98,111)        7  \n          [111,153)       4  \n          [153,179)       0  \n          >=179           1  \n                             \nUtil_C    <4.95           4  \n          [4.95,13.6)     7  \n          >=13.6          0  \n                             \nUtil_A    P1              4  \n          P2              0  \n          P3 and P4       3  \n========  ============  =====\n***Performance (based on Validation Set, after fine-tuning):\nmAUC: 0.6447 \t 95% CI: 0.6146-0.6648 (from 100 bootstrap samples)\n```\n:::\n:::\n\n\n### STEP(v): Evaluate final risk scores on test dataset \n\n<p class=\"autoscore-module\">AutoScore-Ordinal Module 6</p>\n\n- mAUC and generalised c-index are reported for the test set, with 95% bootstrap\nCI (Default: `n_boot = 100` bootstrap samples).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_score <- AutoScore_testing_Ordinal(\n  test_set = test_set, link = \"logit\",\n  final_variables = final_variables, cut_vec = cut_vec, \n  scoring_table = scoring_table, \n  with_label = TRUE, n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n***Performance using AutoScore-Ordinal (based on unseen test Set):\nmAUC: 0.6409 \t 95% CI: 0.6060-0.6837 (from 100 bootstrap samples)\nGeneralised c-index: 0.6098 \t 95% CI: 0.5730-0.6494 (from 100 bootstrap samples)\n```\n:::\n\n```{.r .cell-code}\nhead(pred_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pred_score Label\n1         43     1\n2         59     1\n3         60     1\n4         55     1\n5         37     1\n6         15     1\n```\n:::\n:::\n\n\n- Users can use `pred_score` for further analysis or save it as CSV to other software.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(pred_score, file = \"pred_score.csv\")\n```\n:::\n\n\n### Map score to risk\n\n- As illustrated in [Demo 1](#demo1-map), users can use `plot_predicted_risk()`\nand `conversion_table_ordinal()` functions to map score to risk.\n\n## Demo 3: data with missing values\n\nIn Demo 3, we demonstrate AutoScore-Ordinal for application to data with missing\nvalues.\n\n- For demonstration, we manually induce missing to two variables in the [large\nsample](#demo1) (20% in `Lab_A` and 60% in `Vital_A`.), assuming values close to\nnormal range (i.e., median value in the complete data) are more likely to be\nmissing.\n- Such missing pattern is more common in laboratory tests and vital signs, where\ndoctors may not choose to order a test if there is no reason to suspect\ndeviation from normal range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_data_ordinal_missing <- AutoScore:::induce_informative_missing(\n  df = sample_data_ordinal, vars_to_induce = c(\"Lab_A\", \"Vital_A\"), \n  prop_missing = c(0.2, 0.6)\n)\n```\n:::\n\n\n- Use the same code in [Demo 1](#demo1) to analyse large sample with missing.\nFor illustrative purpose we repeat STEP(i)-(iii) below.\n- As shown below, such missingness pattern has little impact on variable ranking\nand cutoff values.\n\n\n::: {.cell hash='06-autoscore_ordinal_cache/html/missing_ord_702a3486440dd8434c6821c1c523e512'}\n\n```{.r .cell-code}\nset.seed(4)\nout_split <- split_data(data = sample_data_ordinal_missing, \n                        ratio = c(0.7, 0.1, 0.2), strat_by_label = TRUE)\ntrain_set <- out_split$train_set\nvalidation_set <- out_split$validation_set\ntest_set <- out_split$test_set\nmAUC <- AutoScore_parsimony_Ordinal(\n  train_set = train_set, validation_set = validation_set, link = \"logit\",\n  rank = ranking, max_score = 100, n_min = 1, n_max = 20,\n  categorize = \"quantile\", quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), \n  auc_lim_min = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSelect 1 variables:  Mean area under the curve: 0.3788152 \nSelect 2 variables:  Mean area under the curve: 0.5190094 \nSelect 3 variables:  Mean area under the curve: 0.6440789 \nSelect 4 variables:  Mean area under the curve: 0.6512936 \nSelect 5 variables:  Mean area under the curve: 0.6585614 \nSelect 6 variables:  Mean area under the curve: 0.6606368 \nSelect 7 variables:  Mean area under the curve: 0.6590194 \nSelect 8 variables:  Mean area under the curve: 0.6604489 \nSelect 9 variables:  Mean area under the curve: 0.6622922 \nSelect 10 variables:  Mean area under the curve: 0.6922552 \nSelect 11 variables:  Mean area under the curve: 0.691542 \nSelect 12 variables:  Mean area under the curve: 0.6906316 \nSelect 13 variables:  Mean area under the curve: 0.691181 \nSelect 14 variables:  Mean area under the curve: 0.6913957 \nSelect 15 variables:  Mean area under the curve: 0.7372037 \nSelect 16 variables:  Mean area under the curve: 0.7373817 \nSelect 17 variables:  Mean area under the curve: 0.7371645 \nSelect 18 variables:  Mean area under the curve: 0.737344 \nSelect 19 variables:  Mean area under the curve: 0.7370222 \nSelect 20 variables:  Mean area under the curve: 0.7370222 \n```\n:::\n\n::: {.cell-output-display}\n![](06-autoscore_ordinal_files/figure-html/missing_ord-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfinal_variables <- names(ranking[c(1:3, 6, 11, 14)])\ncut_vec <- AutoScore_weighting_Ordinal(\n  train_set = train_set, validation_set = validation_set, \n  final_variables = final_variables, \n  max_score = 100,\n  categorize = \"quantile\",\n  quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), n_boot = 100\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n****Included Variables: \n  variable_name\n1           Age\n2         Lab_A\n3        Util_D\n4       Vital_E\n5        Util_C\n6        Util_A\n****Initial Scores: \n\n\n========  ============  =====\nvariable  interval      point\n========  ============  =====\nAge       <27             0  \n          [27,46)         6  \n          [46,78)        28  \n          [78,87)        36  \n          >=87           43  \n                             \nLab_A     <44            13  \n          [44,59)         1  \n          [59,164)        2  \n          [164,677)      16  \n          >=678          11  \n          Unknown         0  \n                             \nUtil_D    <0.652         16  \n          [0.652,1.32)   15  \n          [1.32,3.93)     5  \n          [3.93,5.93)     2  \n          >=5.93          0  \n                             \nVital_E   <99            21  \n          [99,112)       16  \n          [112,153)       7  \n          [153,179)       4  \n          >=179           0  \n                             \nUtil_C    <5.01           2  \n          [5.01,14.7)     0  \n          >=14.7          3  \n                             \nUtil_A    P1              0  \n          P2              1  \n          P3 and P4       0  \n========  ============  =====\n***Performance (based on validation set):\nmAUC: 0.6500 \t 95% CI: 0.6029-0.6831 (from 100 bootstrap samples)\n***The cutoffs of each variables generated by the AutoScore-Ordinal are saved in cut_vec. You can decide whether to revise or fine-tune them \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.0/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.5.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.5.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
load("D:/NBoxDocuments/EDData/XieFeng201902/NewDataAfter2020.4.15/FD1.RData")
View(FD1)
load("D:/NBoxDocuments2/EDData_SERP/CodeForPaperFormation/SERP_clinical_tableGeneration_runing.RData")
View(FD1)
View(FD1)
View(FD1)
FD1$difftime_Death_discharge
FD1$difftime_Death_discharge
names(FD1)
FD1$difftime_Death_EDdischarge
summary(FD1$difftime_Death_EDdischarge)
min(FD1$difftime_Death_EDdischarge)
plot(density(FD1$difftime_Death_EDdischarge))
plot(density(na.omit(FD1$difftime_Death_EDdischarge)))
a<-na.omit(FD1$difftime_Death_EDdischarge))
a<-na.omit(FD1$difftime_Death_EDdischarge)
adf<-data.frame(a)
View(adf)
FD1$mortality_3d<-FD1$difftime_Death_EDdischarge<3
FD1$mortality_3d[is.na(FD1$mortality_3d)]<-FALSE
summary(FD1$mortality_3d)
summary(FD1$mortality_2d)
FD1$Mortality_2d
summary(FD1$Mortality_2d)
FD1$mortality_3d<-FD1$difftime_Death_EDdischarge<3
FD1$mortality_3d[is.na(FD1$mortality_3d)]<-FALSE
summary(FD1$mortality_3d)
FD1$mortality_5d<-FD1$difftime_Death_EDdischarge<5
FD1$mortality_5d[is.na(FD1$mortality_5d)]<-FALSE
summary(FD1$mortality_5d)
FD1$mortality_7d<-FD1$difftime_Death_EDdischarge<7
FD1$mortality_7d[is.na(FD1$mortality_7d)]<-FALSE
summary(FD1$mortality_7d)
FD1$mortality_14d<-FD1$difftime_Death_EDdischarge<14
FD1$mortality_14d[is.na(FD1$mortality_14d)]<-FALSE
summary(FD1$mortality_14d)
dput(names(FD1))
FD2<-FD2[FD2$validity==1,]
preselect<-c("Age", "Gender",
"ShiftTime", "DayofWeek", "Pulse", "Respiration",
"SPO2", "BP_Diastolic", "BP_Systolic",  "MI", "CHF", "PVD", "Stroke",
"Dementia", "Pulmonary", "Rheumatic", "PUD", "LiverD", "Diabetes",
"Paralysis", "Renal", "AllCancer",
"Num_visit_last_1yr",  "Total_Num_Surgery_last1yr",  "Total_icu_count_last1yr",  "Total_hd_count_last1yr",
"Mortality_2d")
FD2<-FD2[,preselect]
FD2<-FD1[!FD1$admit_year=="2016",]
FD2<-FD2[FD2$validity==1,]
preselect<-c("Age", "Gender",
"ShiftTime", "DayofWeek", "Pulse", "Respiration",
"SPO2", "BP_Diastolic", "BP_Systolic",  "MI", "CHF", "PVD", "Stroke",
"Dementia", "Pulmonary", "Rheumatic", "PUD", "LiverD", "Diabetes",
"Paralysis", "Renal", "AllCancer",
"Num_visit_last_1yr",  "Total_Num_Surgery_last1yr",  "Total_icu_count_last1yr",  "Total_hd_count_last1yr",
"Mortality_2d")
FD2<-FD2[,preselect]
FD2$Pulse<-ifelse(FD2$Pulse>300|FD2$Pulse<0,NA,FD2$Pulse)
density(FD2$Pulse,na.rm=T)%>%plot
FD2$Respiration<-ifelse(FD2$Respiration>50|FD2$Respiration<0,NA,FD2$Respiration)
density(FD2$Respiration,na.rm=T)%>%plot
FD2$SPO2<-ifelse(FD2$SPO2>100|FD2$SPO2<0,NA,FD2$SPO2)
density(FD2$SPO2,na.rm=T)%>%plot
FD2$BP_Systolic<-ifelse(FD2$BP_Systolic>300,NA,FD2$BP_Systolic)
density(FD2$BP_Systolic,na.rm=T)%>%plot
FD2$BP_Diastolic<-ifelse(FD2$BP_Diastolic>180,NA,FD2$BP_Diastolic)
density(FD2$BP_Diastolic,na.rm=T)%>%plot
# calculate the NA%
colSums(is.na(FD2))
colSums(is.na(FD2))/length(FD2[,1])
library(tidyverse)
library(caret)
library(AutoScore)
library(pROC)
library(zoo)
library(randomForest)
library(stringr)
library(dplyr)
FD2<-FD2[,preselect]
FD2$Pulse<-ifelse(FD2$Pulse>300|FD2$Pulse<0,NA,FD2$Pulse)
density(FD2$Pulse,na.rm=T)%>%plot
FD2$Respiration<-ifelse(FD2$Respiration>50|FD2$Respiration<0,NA,FD2$Respiration)
density(FD2$Respiration,na.rm=T)%>%plot
FD2$SPO2<-ifelse(FD2$SPO2>100|FD2$SPO2<0,NA,FD2$SPO2)
density(FD2$SPO2,na.rm=T)%>%plot
FD2$BP_Systolic<-ifelse(FD2$BP_Systolic>300,NA,FD2$BP_Systolic)
density(FD2$BP_Systolic,na.rm=T)%>%plot
FD2$BP_Diastolic<-ifelse(FD2$BP_Diastolic>180,NA,FD2$BP_Diastolic)
density(FD2$BP_Diastolic,na.rm=T)%>%plot
colSums(is.na(FD2))
colSums(is.na(FD2))/length(FD2[,1])
library(caret)
preProcValues <- preProcess(FD2, method = c("medianImpute"))
FD2<- predict(preProcValues, FD2)
#library('RANN')
colSums(is.na(FD2))/length(FD2[,2])
str(FD2)
colSums(is.na(FD2))
colSums(is.na(FD2))/length(FD2[,1])
install.packages("caret")
library(caret)
preProcValues <- preProcess(FD2, method = c("medianImpute"))
FD2<- predict(preProcValues, FD2)
#library('RANN')
colSums(is.na(FD2))/length(FD2[,2])
str(FD2)
c<-sapply(FD2, class)=="character"
for(i in colnames(FD2)[c]){
FD2[,i]<-as.factor(FD2[,i])
}
names(FD2)[length(names(FD2))]<-"label"
FD2$label<-as.factor(FD2$label)
set.seed(4)
Validateindex<-sample((1:length(FD2[,1])),round(length(FD2[,1])*0.2))
TrainSet<-FD2[-Validateindex,]
ValidationSet<-FD2[Validateindex,]
View(ValidationSet)
train_set<-TrainSet
ranking <- AutoScore_rank(train_set, ntree=100)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
validation_set<-ValidationSet
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
library(AutoScore)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AutoScore_parsimony
library(AutoScore)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AutoScore_parsimony
rm(AutoScore_parsimony)
AutoScore_parsimony
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
num_var <- 6
final_variables <- names(ranking[1:num_var])
cut_vec <- AutoScore_weighting(
train_set,
validation_set,
final_variables,
max_score = 100,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
rm(AutoScore_fine_tuning())
rm(AutoScore_fine_tuning
)
cut_vec <- AutoScore_weighting(
train_set,
validation_set,
final_variables,
max_score = 100,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
rm(AutoScore_weighting)
cut_vec <- AutoScore_weighting(
train_set,
validation_set,
final_variables,
max_score = 100,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AutoScore_testing
rm(AutoScore_testing)
AutoScore_testing
dput(final_variables)
FD4<-FD1[FD1$admit_year=="2016",]
preselect1<-c(preselect, "Triage_Class_Code","LiverMild", "DM1", "DM2",
"DMcx",  "Cancer", "LiverSevere", "Mets","HIV","Temperature","AVPU","FIO2","GCS","BP_Systolic", "Pulse", "BP_Diastolic", "Age", "Respiration",
"SPO2",
"DeathLabel2", "Mortality_2d", "Mortality_30days_postDischarge", "DeathOverall",  "readmission_30d", "ICU_Admission2", "Mortality_1year","mortality_3d",
"mortality_5d", "mortality_7d", "mortality_14d","mortality_30d")
FD4<-FD4[,preselect1]
TestSet<-FD4
levels(TestSet$Triage_Class_Code)
TestSet$Temperature<-ifelse(TestSet$Temperature>50|TestSet$Temperature<20,NA,TestSet$Temperature)
TestSet$Pulse<-ifelse(TestSet$Pulse>300|TestSet$Pulse<0,NA,TestSet$Pulse)
density(TestSet$Pulse,na.rm=T)%>%plot
TestSet$Respiration<-ifelse(TestSet$Respiration>50|TestSet$Respiration<0,NA,TestSet$Respiration)
density(TestSet$Respiration,na.rm=T)%>%plot
TestSet$SPO2<-ifelse(TestSet$SPO2>100|TestSet$SPO2<0,NA,TestSet$SPO2)
density(TestSet$SPO2,na.rm=T)%>%plot
TestSet$BP_Systolic<-ifelse(TestSet$BP_Systolic>300,NA,TestSet$BP_Systolic)
density(TestSet$BP_Systolic,na.rm=T)%>%plot
TestSet$BP_Diastolic<-ifelse(TestSet$BP_Diastolic>180,NA,TestSet$BP_Diastolic)
density(TestSet$BP_Diastolic,na.rm=T)%>%plot
colSums(is.na(TestSet))
colSums(is.na(TestSet))/length(TestSet[,1])
FD4<-FD1[FD1$admit_year=="2016",]
preselect1<-c(preselect, "Triage_Class_Code","LiverMild", "DM1", "DM2",
"DMcx",  "Cancer", "LiverSevere", "Mets","HIV","Temperature","AVPU","FIO2","GCS",
"DeathLabel2", "Mortality_2d", "Mortality_30days_postDischarge", "DeathOverall",  "readmission_30d", "ICU_Admission2", "Mortality_1year","mortality_3d",
"mortality_5d", "mortality_7d", "mortality_14d","mortality_30d")
FD4<-FD4[,preselect1]
TestSet<-FD4
levels(TestSet$Triage_Class_Code)
TestSet$Temperature<-ifelse(TestSet$Temperature>50|TestSet$Temperature<20,NA,TestSet$Temperature)
TestSet$Pulse<-ifelse(TestSet$Pulse>300|TestSet$Pulse<0,NA,TestSet$Pulse)
density(TestSet$Pulse,na.rm=T)%>%plot
TestSet$Respiration<-ifelse(TestSet$Respiration>50|TestSet$Respiration<0,NA,TestSet$Respiration)
density(TestSet$Respiration,na.rm=T)%>%plot
TestSet$SPO2<-ifelse(TestSet$SPO2>100|TestSet$SPO2<0,NA,TestSet$SPO2)
density(TestSet$SPO2,na.rm=T)%>%plot
TestSet$BP_Systolic<-ifelse(TestSet$BP_Systolic>300,NA,TestSet$BP_Systolic)
density(TestSet$BP_Systolic,na.rm=T)%>%plot
TestSet$BP_Diastolic<-ifelse(TestSet$BP_Diastolic>180,NA,TestSet$BP_Diastolic)
density(TestSet$BP_Diastolic,na.rm=T)%>%plot
##calculate the NA%
colSums(is.na(TestSet))
colSums(is.na(TestSet))/length(TestSet[,1])
library(caret)
preProcValues <- preProcess(TestSet, method = c("medianImpute"))
TestSet<- predict(preProcValues, TestSet)
sum(is.na(TestSet))
colSums(is.na(TestSet))/length(TestSet[,2])
TrainSet$AllCancer<-as.factor(TrainSet$AllCancer)
ValidationSet$AllCancer<-as.factor(ValidationSet$AllCancer)
TestSet$AllCancer<-as.factor(TestSet$AllCancer)
cut_vec
scoring_table
scoring_table <- AutoScore_fine_tuning(train_set,
validation_set,
final_variables,
cut_vec,
max_score = 100)
test_set<-TestSet[,c(final_variables,"Mortality_2d")]
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
final_variables
i<-"Mortality_2d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_3d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_5d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_7d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_14d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_14d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_14d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_14d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_30d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_30d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
seq1<-c( "Age",
"Triage_Class_Code",
"Pulse", "Respiration",  "BP_Diastolic", "BP_Systolic",
"SPO2",
"MI", "CHF", "PVD", "Stroke",
"Dementia", "Pulmonary", "Rheumatic", "PUD", "LiverMild", "DM1", "DM2",
"DMcx", "Paralysis", "Renal", "Cancer", "LiverSevere", "Mets","HIV", "Temperature","AVPU","FIO2","GCS",
"DeathLabel2",
"Mortality_2d", "Mortality_30days_postDischarge", "DeathOverall",  "readmission_30d", "ICU_Admission2", "Mortality_1year", "mortality_3d",
"mortality_5d", "mortality_7d", "mortality_14d","mortality_30d")
TestSet4<-TestSet[,seq1]
load("D:/Document/Project_AutoScore/Project_development/AutoScoreR_markdown_and_dev/vignettes_for_github/TestSet4.RData")
library(pROC)
library(pROC)
set.seed(4)
label_list<-list(TestSet4$mortality_3d,TestSet4$Mortality_2d,TestSet4$mortality_5d,TestSet4$mortality_7d,TestSet4$mortality_14d)
score_list<-list(TestSet4$CART,TestSet4$Triage_Class_Code,TestSet4$MEWS,TestSet4$NEWS,TestSet4$CCI)
auc_result<-matrix(data = NA, nrow = 5, ncol = 5)
for(i in 1:5){
for(j in 1:5){
a<-round(as.numeric(ci(roc(label_list[[j]],score_list[[i]],quiet = T))),digits = 3)
auc_result[i,j]<-paste(a[2]," ","(",a[1],"-",a[3],")",sep="")}}
r<-data.frame(auc_result)
colnames(r)<-c("mortality_3d","2-day Mortality","mortality_5d","$mortality_7d","mortality_14d")
row.names(r)<-c("SERP","CART","PACS","MEWS","NEWS","CCI")
library(pROC)
set.seed(4)
label_list<-list(TestSet$mortality_3d,TestSet$Mortality_2d,TestSet$mortality_5d,TestSet$mortality_7d,TestSet$mortality_14d)
score_list<-list(TestSet4$CART,TestSet4$Triage_Class_Code,TestSet4$MEWS,TestSet4$NEWS,TestSet4$CCI)
auc_result<-matrix(data = NA, nrow = 5, ncol = 5)
for(i in 1:5){
for(j in 1:5){
a<-round(as.numeric(ci(roc(label_list[[j]],score_list[[i]],quiet = T))),digits = 3)
auc_result[i,j]<-paste(a[2]," ","(",a[1],"-",a[3],")",sep="")}}
r<-data.frame(auc_result)
colnames(r)<-c("mortality_3d","2-day Mortality","mortality_5d","$mortality_7d","mortality_14d")
row.names(r)<-c("SERP","CART","PACS","MEWS","NEWS","CCI")
row.names(r)<-c("CART","PACS","MEWS","NEWS","CCI")
View(r)
i<-"Mortality_2d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_3d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
i<-"mortality_5d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
pred_score
i<-"Mortality_2d"
test_set<-TestSet[,c(final_variables,i)]
names(test_set)[names(test_set) == i] <- "label"
pred_score <- AutoScore_testing(test_set, final_variables, cut_vec, scoring_table, threshold = "best", with_label = TRUE)
library(pROC)
set.seed(4)
label_list<-list(TestSet$mortality_3d,TestSet$Mortality_2d,TestSet$mortality_5d,TestSet$mortality_7d,TestSet$mortality_14d)
score_list<-list(pred_score$pred_score, TestSet4$CART,TestSet4$Triage_Class_Code,TestSet4$MEWS,TestSet4$NEWS,TestSet4$CCI)
auc_result<-matrix(data = NA, nrow = 6, ncol = 5)
for(i in 1:6){
for(j in 1:5){
a<-round(as.numeric(ci(roc(label_list[[j]],score_list[[i]],quiet = T))),digits = 3)
auc_result[i,j]<-paste(a[2]," ","(",a[1],"-",a[3],")",sep="")}}
r<-data.frame(auc_result)
colnames(r)<-c("mortality_3d","2-day Mortality","mortality_5d","$mortality_7d","mortality_14d")
row.names(r)<-c("SERP","CART","PACS","MEWS","NEWS","CCI")
View(r)
save.image("D:/NBoxDocuments2/EDData_SERP/CodeForPaperFormation/SERP_clinical_tableGeneration_runing_revised_paper.RData")
dput(names(FD1))
FD2<-FD1[!FD1$admit_year=="2016",]
##311196
## Data Pre-selection
FD2<-FD2[FD2$validity==1,]
preselect<-c("Age", "Gender",
"ShiftTime", "DayofWeek", "Pulse", "Respiration",
"SPO2", "BP_Diastolic", "BP_Systolic",  "MI", "CHF", "PVD", "Stroke",
"Dementia", "Pulmonary", "Rheumatic", "PUD", "LiverD", "Diabetes",
"Paralysis", "Renal", "AllCancer",
"Num_visit_last_1yr",  "Total_Num_Surgery_last1yr",  "Total_icu_count_last1yr",  "Total_hd_count_last1yr",
"Mortality_2d", "mortality_3d",
"mortality_5d", "mortality_7d", "mortality_14d")
FD2<-FD2[,preselect]

max_cluster = 5
categorize = "quantile"
quantile(a, quantiles)
cut_off_tmp <- quantile(a, quantiles)
cut_off_tmp <- unique(cut_off_tmp)
cut_off_tmp
cut_off <- signif(cut_off_tmp, 3)
l <- list(cut_off)
l
names(l)[1] <- names(df)[i]
names(l)[1] <- names(a)[i]
cut_vec <- list()
cut_vec <- append(cut_vec, l)
cut_vec
for(i in 1:length(cut_vec)) cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
cut_vec
cut_vec
cut_vec
cut_vec
cut_vec
cut_off
cut_off(0,1,2)
cut_off<-c(0,1,2)
cut_off
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
for(i in 1:length(cut_vec)) cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
cut_vec
cut_vec[[i]]
(lenggth(cut_vec[[i]])<=2
)
(lenggth(cut_vec[[i]])<=2)
(length(cut_vec[[i]])<=2)
(length(cut_vec[[i]])>=3)
cut(a, breaks = c(0,21), right = F, include.lowest = F, dig.lab = 3)
length(c())
length(c(1))
length(cut_vec_new)==0
cut_vec
cut_vec_new<-c()
length(cut_vec_new)==0
length(cut_vec_new)==0
length(cut_vec_new)==0
length(cut_vec_new)==0
mode(a)
mode(a)
a
Mode(a)
table(a)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(a)
a==getmode(a)
b<-a
b[a!=getmode(a)]<-"no"
b
paste0("not_",getmode(a))
paste0("not_",getmode(a))
b<-a
a[a!=getmode(a)]<-paste0("not_",getmode(a))
a
a<-as.factor(a)
a
transform_df_fixed <- function(df, cut_vec) {
j <- 1
# for loop going through all variables
for (i in 1:(length(df) - 1)) {
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
(next)() else stop("ERROR: The number of categories should be less than 9")
}
## make conresponding cutvec for validation_set: cut_vec_new
#df<-validation_set_1
#df<-train_set_1
vec<-df[, i]
cut_vec_new <- cut_vec[[j]]
if(length(cut_vec_new)==0){
a<-df[, i]
a[a!=getmode(a)]<-paste0("not_",getmode(a))
a<-as.factor(a)
df[, i]<-a
} else{
if(min(vec) < cut_vec[[j]][1])   cut_vec_new <- c(floor(min(df[, i]))-100, cut_vec_new)
if(max(vec) >= cut_vec[[j]][length(cut_vec[[j]])] )  cut_vec_new <- c(cut_vec_new, ceiling(max(df[, i])+100))
cut_vec_new_tmp <- signif(cut_vec_new, 3)
cut_vec_new_tmp <- unique(cut_vec_new_tmp)  ###revised update##
df[, i] <- cut(df[, i], breaks = cut_vec_new_tmp, right = F, include.lowest = F, dig.lab = 3)
# xmin<-as.character(min(cut_vec_new_tmp)) xmax<-as.character(max(cut_vec_new_tmp))
## delete min and max for the Interval after discretion: validation_set
if(min(vec) < cut_vec[[j]][1]) levels(df[, i])[1] <- gsub(".*,", "(,", levels(df[, i])[1])
if(max(vec) >= cut_vec[[j]][length(cut_vec[[j]])] ) levels(df[, i])[length(levels(df[, i]))] <- gsub(",.*", ",)", levels(df[, i])[length(levels(df[, i]))])
}
j <- j + 1
}
return(df)
}
cut_vec
source('D:/Document/GitHub/my_AutoScore/R/AutoScore.R')
View(FDS_adult_composite)
View(FDS_adult_composite)
dput(names(FDS_adult_composite))
a<-FDS_adult_composite[,c( "Num_visit_last_1yr", "Total_Num_Surgery_last1yr",
"Total_icu_count_last1yr", "Total_hd_count_last1yr", "label"
)]
get_cut_vec(a)
View(a)
View(a)
get_cut_vec(a)
rlang::last_error()
str(a)
i<-4
str(sample_data)
get_cut_vec(sample_data)
a<-data.frame(a)
get_cut_vec(a)
View(a)
df<-a
cut_vec <- list()
for (i in 1:(length(df) - 1)) {
# for factor variable
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
#(next)() else stop("ERROR: The number of categories should be less than 10")
(next)()
else
warning("WARNING: The number of categories should be less than 10",
names(df)[i])
}
# for continuous variable: variable transformation
# select discretization method, default mode = 1
## mode 1 - quantiles
if (categorize == "quantile") {
# options(scipen = 20)
#print("in quantile")
cut_off_tmp <- quantile(df[, i], quantiles)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)  # remain 3 digits
#print(cut_off)
## mode 2 k-means clustering
} else if (categorize == "k_means") {
#print("using k-means")
clusters <- kmeans(df[, i], max_cluster)
cut_off_tmp <- c()
for (j in unique(clusters$cluster)) {
#print(min(df[,i][clusters$cluster==j]))
#print(length(df[,i][clusters$cluster==j]))
cut_off_tmp <- append(cut_off_tmp, min(df[, i][clusters$cluster == j]))
#print(cut_off_tmp)
}
cut_off_tmp <- append(cut_off_tmp, max(df[, i]))
cut_off_tmp <- sort(cut_off_tmp)
#print(names(df)[i])
#assert (length(cut_off_tmp) == 6)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)
cut_off <- unique(cut_off)
#print (cut_off)
} else {
stop('ERROR: please specify correct method for categorizing:  "quantile" or "k_means".')
}
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
#print("****************************cut_vec*************************")
#print(cut_vec)
}
## delete min and max for each cut-off (min and max will be captured in the new dataset)
for(i in 1:length(cut_vec)){
if(length(cut_vec[[i]])<=2) cut_vec[[i]]<-c()
else cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
}
i
cut_off
cut_off
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
cut_vec
cut_off
cut_off
names(df)[i]
View(a)
df[, i]
quantile(df[, i], quantiles)
quantile(df[, 3], quantiles)
cut_vec <- list()
for (i in 1:(length(df) - 1)) {
# for factor variable
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
#(next)() else stop("ERROR: The number of categories should be less than 10")
(next)()
else
warning("WARNING: The number of categories should be less than 10",
names(df)[i])
}
# for continuous variable: variable transformation
# select discretization method, default mode = 1
## mode 1 - quantiles
if (categorize == "quantile") {
# options(scipen = 20)
#print("in quantile")
cut_off_tmp <- quantile(df[, i], quantiles)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)  # remain 3 digits
#print(cut_off)
## mode 2 k-means clustering
} else if (categorize == "k_means") {
#print("using k-means")
clusters <- kmeans(df[, i], max_cluster)
cut_off_tmp <- c()
for (j in unique(clusters$cluster)) {
#print(min(df[,i][clusters$cluster==j]))
#print(length(df[,i][clusters$cluster==j]))
cut_off_tmp <- append(cut_off_tmp, min(df[, i][clusters$cluster == j]))
#print(cut_off_tmp)
}
cut_off_tmp <- append(cut_off_tmp, max(df[, i]))
cut_off_tmp <- sort(cut_off_tmp)
#print(names(df)[i])
#assert (length(cut_off_tmp) == 6)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)
cut_off <- unique(cut_off)
#print (cut_off)
} else {
stop('ERROR: please specify correct method for categorizing:  "quantile" or "k_means".')
}
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
#print("****************************cut_vec*************************")
#print(cut_vec)
}
## delete min and max for each cut-off (min and max will be captured in the new dataset)
for(i in 1:length(cut_vec)){
if(length(cut_vec[[i]])<=2) cut_vec[[i]]<-c()
else cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
}
quantile(df[, i], quantiles)
cut_off
for(i in 1:length(cut_vec)){
if(length(cut_vec[[i]])<=2) cut_vec[[i]]<-c()
else cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
}
cut_vec
cut_vec <- list()
for (i in 1:(length(df) - 1)) {
# for factor variable
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
#(next)() else stop("ERROR: The number of categories should be less than 10")
(next)()
else
warning("WARNING: The number of categories should be less than 10",
names(df)[i])
}
# for continuous variable: variable transformation
# select discretization method, default mode = 1
## mode 1 - quantiles
if (categorize == "quantile") {
# options(scipen = 20)
#print("in quantile")
cut_off_tmp <- quantile(df[, i], quantiles)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)  # remain 3 digits
#print(cut_off)
## mode 2 k-means clustering
} else if (categorize == "k_means") {
#print("using k-means")
clusters <- kmeans(df[, i], max_cluster)
cut_off_tmp <- c()
for (j in unique(clusters$cluster)) {
#print(min(df[,i][clusters$cluster==j]))
#print(length(df[,i][clusters$cluster==j]))
cut_off_tmp <- append(cut_off_tmp, min(df[, i][clusters$cluster == j]))
#print(cut_off_tmp)
}
cut_off_tmp <- append(cut_off_tmp, max(df[, i]))
cut_off_tmp <- sort(cut_off_tmp)
#print(names(df)[i])
#assert (length(cut_off_tmp) == 6)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)
cut_off <- unique(cut_off)
#print (cut_off)
} else {
stop('ERROR: please specify correct method for categorizing:  "quantile" or "k_means".')
}
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
#print("****************************cut_vec*************************")
#print(cut_vec)
}
cut_vec
cut_vec[[i]]<-c()
cut_vec
for(i in 1:length(cut_vec)){
if(length(cut_vec[[i]])<=2) cut_vec[[i]]<-c("let_binary")
else cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
}
cut_vec
get_cut_vec(a)
get_cut_vec <-
function(df,
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1), #by default
max_cluster = 5,
categorize = "quantile") {
# Generate cut_vec for downstream usage
cut_vec <- list()
for (i in 1:(length(df) - 1)) {
# for factor variable
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
#(next)() else stop("ERROR: The number of categories should be less than 10")
(next)()
else
warning("WARNING: The number of categories should be less than 10",
names(df)[i])
}
# for continuous variable: variable transformation
# select discretization method, default mode = 1
## mode 1 - quantiles
if (categorize == "quantile") {
# options(scipen = 20)
#print("in quantile")
cut_off_tmp <- quantile(df[, i], quantiles)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)  # remain 3 digits
#print(cut_off)
## mode 2 k-means clustering
} else if (categorize == "k_means") {
#print("using k-means")
clusters <- kmeans(df[, i], max_cluster)
cut_off_tmp <- c()
for (j in unique(clusters$cluster)) {
#print(min(df[,i][clusters$cluster==j]))
#print(length(df[,i][clusters$cluster==j]))
cut_off_tmp <- append(cut_off_tmp, min(df[, i][clusters$cluster == j]))
#print(cut_off_tmp)
}
cut_off_tmp <- append(cut_off_tmp, max(df[, i]))
cut_off_tmp <- sort(cut_off_tmp)
#print(names(df)[i])
#assert (length(cut_off_tmp) == 6)
cut_off_tmp <- unique(cut_off_tmp)
cut_off <- signif(cut_off_tmp, 3)
cut_off <- unique(cut_off)
#print (cut_off)
} else {
stop('ERROR: please specify correct method for categorizing:  "quantile" or "k_means".')
}
l <- list(cut_off)
names(l)[1] <- names(df)[i]
cut_vec <- append(cut_vec, l)
#print("****************************cut_vec*************************")
#print(cut_vec)
}
## delete min and max for each cut-off (min and max will be captured in the new dataset)
for(i in 1:length(cut_vec)){
if(length(cut_vec[[i]])<=2) cut_vec[[i]]<-c("let_binary")
else cut_vec[[i]] <- cut_vec[[i]][2:(length(cut_vec[[i]]) - 1)]
}
return(cut_vec)
}
get_cut_vec(a)
source('D:/Document/GitHub/my_AutoScore/R/AutoScore.R')
transform_df_fixed(a,get_cut_vec(a))
source('D:/Document/GitHub/my_AutoScore/R/AutoScore.R')
relevel(a$label)
?relevel
relevel(a$label,ref = 1)
relevel(a$label,ref = “1”)
a$label<-FDS_adult_composite$MI
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, cache = FALSE)
#source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/AutoScore.R')
library(pROC)
library(randomForest)
library(ggplot2)
library(tableone)
library(knitr)
sample_data《-1》
sample_data<-a
check_data(sample_data)
set.seed(4)
out_split <- split_data(data = sample_data, ratio = c(0.7, 0.1, 0.2))
train_set <- out_split$train_set
validation_set <- out_split$validation_set
test_set <- out_split$test_set
ranking <- AutoScore_rank(train_set, ntree = 100)
ranking<-names(sample_data)[-5]
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
ranking
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
source('D:/Document/GitHub/my_AutoScore/R/AutoScore.R')
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
get_cut_vec(train_set)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 2,
n_max = 3,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
i
df<-train_set
cut_vec <- list()
for (i in 1:(length(df) - 1)) {
# for factor variable
if (class(df[, i]) == "factor") {
if (length(levels(df[, i])) < 10)
#(next)() else stop("ERROR: The number of categories should be less than 10")
(next)()
else
warning("WARNING: The number of categories should be less than 10",
names(df)[i])
}
}
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 4,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
ranking
ranking <- AutoScore_rank(train_set[1:10000,], ntree = 100)
AUC <- AutoScore_parsimony(
train_set,
validation_set,
rank = ranking,
max_score = 100,
n_min = 1,
n_max = 20,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
num_var <- 4
cut_vec <- AutoScore_weighting(
train_set,
validation_set,
final_variables,
max_score = 100,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
final_variables <- names(ranking[1:num_var])
cut_vec <- AutoScore_weighting(
train_set,
validation_set,
final_variables,
max_score = 100,
categorize = "quantile",
quantiles = c(0, 0.05, 0.2, 0.8, 0.95, 1)
)
View(sample_data)
cut_vec
scoring_table <- AutoScore_fine_tuning(train_set,
validation_set,
final_variables,
cut_vec,
max_score = 100)
vignette(package = "AutoScore")
usethis::use_vignette("Guide_book")
devtools::load_all(".")

library(AutoScore)
load("~/testdf_mimic_scoregenerator3.Rdata")
install.packages("~/AutoScore_0.1.0.zip", repos = NULL, type = "win.binary")
library(AutoScore)
data<-Preprocess(testdf1_mimic,outcome = "label")
tableone(data)
View(testdf1_mimic)
AutoScore(data,n=12)
AutoScore_insample(data,n=10)
AutoScore_validation(data,n=10)
install.packages("D:/Document/Project_AutoScore/Project_development/AutoScore_0.1.0.zip", repos = NULL, type = "win.binary")
load("D:/Document/Project_AutoScore/Project_development/testdata1_mimic(sharing).Rdata")
library(AutoScore)
AutoScore_validation_range(data,nmin=1,nmax=20)
data<-Preprocess(testdf1_mimic,outcome = "label")
AutoScore_validation_range(data,nmin=1,nmax=20)
install.packages('devtools')
library(devtools)
install_github(
repo = "fengx13/AutoScore",
auth_token = "50e427fbd879a3a98a764c4fe9feece523735839"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "50e427fbd879a3a98a764c4fe9feece523735839"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "50e427fbd879a3a98a764c4fe9feece523735839"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "50e427fbd879a3a98a764c4fe9feece523735839"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "50e427fbd879a3a98a764c4fe9feece523735839"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "fc6c058a108e226332b0c40f8574f76e8eee97b9"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "fc6c058a108e226332b0c40f8574f76e8eee97b9",
ref="develop"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf",
ref="develop"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf"
#  ref="develop"
)
install_github(
repo = "fengx13/AutoScore",
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf"
#  ref="develop"
)
?install_github
install_github("klutometis/roxygen")
usethis::edit_r_profile()
install_github(
repo = "fengx13/AutoScore")
install_github(
repo = "fengx13/AutoScore"
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf")
install_github(
repo = "fengx13/AutoScore"
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf")
install_github(
repo = "fengx13/AutoScore",
auth_token = "99c048af4dd914cbe3a1a0f7a993525dba03f2cf")
install_github(
repo = "fengx13/AutoScore")
install_github(
repo = "fengx13/AutoScore")
Sys.setenv("TAR" = "internal")
install_github(
repo = "fengx13/AutoScore")
install_github(
repo = "fengx13/AutoScore")
install_github(
repo = "fengx13/AutoScore")
remove.packages("AutoScore", lib="~/R/win-library/3.5")
library(AutoScore)
library(pCalibrate）
library(pCalibrate)
vignette(package = "pCalibrate")
?MultiVariable
?pCalibrate
load("D:/Document/Project_AutoScore/Project_development/AutoScore/testdf3_mimic.RData")
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
AutoScore_outofsample(Dataset = testdf3_mimic)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/built-in function.R')
AutoScore_outofsample(Dataset = testdf3_mimic)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/built-in function.R')
AutoScore_outofsample(Dataset = testdf3_mimic)
AutoScore_insample(Dataset = testdf3_mimic)
AutoScore_insample(Dataset = testdf3_mimic, m=8)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
AutoScore_insample(Dataset = testdf3_mimic, m=8)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
AutoScore_insample( data = testdf3_mimic, m=8)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
AutoScore_insample( data = testdf3_mimic, m=8)
MultiVariable(testdf3_mimic)
UniVariable(testdf3_mimic)
tableone(testdf3_mimic)
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
names(testdf3_mimic)[names(testdf3_mimic)=="label"]<-"Mortality_inpatient"
save.image("D:/Document/Project_AutoScore/Project_development/AutoScore/SampleData.RData")
Sample_Data<-testdf3_mimic
devtools::use_data(Sample_Data, AutoScore)
library(devtools)
use_data(Sample_Data, AutoScore)
df_AutoScore <- Sample_Data
load("D:/Document/Project_AutoScore/Project_development/AutoScore/SampleData.RData")
Sample_Data<-testdf3_mimic
df_AutoScore <- Sample_Data
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/direct_function.R')
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/peplines_function.R')
source('D:/Document/Project_AutoScore/Project_development/AutoScore/R/built-in function.R')
## Load data (input data from csv or excel)
## can use sample data built in the package for the demo
df_AutoScore <- Sample_Data
##------------------------------------------------------------------
## Data preprocessing
## - Users are suggested to handle missing values, outliers, etc
## - Make Sure data are in good quality and reasonable distribution before entering our AutoScore Pipeline
## - "Preprocess" built-in function may help in missing value imputation
##
## Prepare TrainSet, ValidationSet, and Testset
## - Users need to define datasets to train, validate, and test model
## - Users can also use codes below to split their dataset into Train/validation/test(7:1:2)
##
## Other requirements for Data input
## - Independent variables (X) can be numeric (class: num / int) or categorical (class: factor/logic).
## - Categories/levels for each factor should be less than 10
## - Variables of character class (in R environment) were not accepted. Please transfer them into categorical variables first before going on with this codebook
## - Dependent variable (Y) should be binary, and its name should be changed to “label” (Can use codes below to do it.)
##-------------------------------------------------------------------
## Change name of Dependent variable (Y)/Outcome to "label" before going on with this codebook
names(df_AutoScore)[names(df_AutoScore)=="Mortality_inpatient"]<-"label"
## Data Splitting
set.seed(4)
Testindex <- sample((1:10000), 2000)
Validateindex <- sample((1:10000)[(1:10000) %in% Testindex], 1000)
TrainSet <- df_AutoScore[-c(Validateindex, Testindex),]
TestSet <- df_AutoScore[Testindex,]
ValidationSet <- df_AutoScore[Validateindex,]
## Data displaying
head(TrainSet)
head(ValidationSet)
head(TestSet)
##-------------------------------------------------------------------
## Run AutoScore to build clinical scores: Example Code
##-------------------------------------------------------------------
## STEP (1): Genrate variable ranking List (AutoScore Module 1)
## - ntree: Number of trees in random forest algorithm, default:100
Ranking <- AutoScore_rank(TrainSet, ntree=100)
## STEP (2): Select the best model with parsimony plot (AutoScore Modules 2+3+4)
## - nmin: Minimum number of selected variables, default:1
## - nmax: Maximum number of selected variables, default:20
## - probs: Predefine quantiles to convert continuous variables to categorical, default:(0, 0.05, 0.2, 0.8, 0.95, 1)
AUC <- AutoScore_parsimony(TrainSet, ValidationSet, rank=Ranking, nmin=1, nmax=20, probs=c(0, 0.05, 0.2, 0.8, 0.95, 1))
## Determine final num_var for predictive modeling
## -- decided with the parsimony plot from STEP(2)
num_var <- 6
FinalVariable <- names(Ranking[1:num_var])
## STEP (3): Generate initial score with Final Variable list (Rerun AutoScore Module 2+3)
## - MaxScore: Predefined cap of final score, e.g. 100
CutVec <- AutoScore_weighting(TrainSet, ValidationSet, FinalVariable, MaxScore=100, probs=c(0, 0.05, 0.2, 0.8, 0.95, 1))
## STEP (4): Fine-tune the score
## - Revise CutVec with domain knowledge to update scoring table (AutoScore Module 5)
## - Rerun AutoScore Modules 2+3
## - User can choose any cut-off values/any number of categories
CutVec$tempc_mean <- c(36, 36.5, 37.3, 38)
CutVec$platelet_min <- c(60, 120, 280, 400)
CutVec$lactate_max <- c(1, 1.7, 2.8, 5.7)
CutVec$resprate_mean <- c(13, 16, 21, 26)
CutVec$spo2_mean <- c(95, 99)
ScoringTable <- AutoScore_fine_tuning(TrainSet, ValidationSet, FinalVariable, CutVec, MaxScore=100)
## STEP (5): Final score evaluation (AutoScore Module 6)
AutoScore_testing(TestSet, FinalVariable, CutVec, ScoringTable)
df_AutoScore<-Preprocess(Sample_Data,outcome = "Mortality_inpatient")
load("D:/Document/Project_AutoScore/Project_development/AutoScore/SampleData.RData")
df_AutoScore<-testdf3_mimic\
df_AutoScore<-testdf3_mimic
AutoScore_insample(df_AutoScore, m=8, MaxScore = 150, probs = c(0, 0.05, 0.2, 0.8, 0.95, 1))
df_AutoScore<-Preprocess(Sample_Data,outcome = "Mortality_inpatient")
Sample_Data<-testdf3_mimic
df_AutoScore<-Preprocess(Sample_Data,outcome = "Mortality_inpatient")
AutoScore_insample(df_AutoScore, m=8, MaxScore = 150, probs = c(0, 0.05, 0.2, 0.8, 0.95, 1))
AutoScore_outofsample(df_AutoScore, m = 8 , Percentage_test = 0.2, MaxScore = 150, probs = c(0, 0.05, 0.2, 0.8, 0.95, 1))
##-------------------------------------------------------------------
## Other analysis direct function usage
##-------------------------------------------------------------------
## Descriptive Analysis and generate the result table
Descriptive(df_AutoScore)
## Univariable Analysis and generate the result table
UniTable<-UniVariable(df_AutoScore)
## Multivariable Analysis and generate the result table
MultiTable<-MultiVariable(df_AutoScore)
